openapi: "3.0.1"
info:
  title: Reindexer REST API
  description: |
    **Reindexer** is an embeddable, in-memory, document-oriented database with a high-level Query builder interface.
    Reindexer's goal is to provide fast search with complex queries.
    Reindexer is compact, fast and it does not have heavy dependencies.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 5.8.0
servers:
- url: /api/v1
tags:
- name: databases
  description: Databases management
- name: namespaces
  description: Namespaces management
- name: items
  description: Documents management
- name: indexes
  description: Indexes management
- name: queries
  description: Queries to reindexer (dsl/sql)
- name: system
  description: System methods
paths:
  /db:
    get:
      tags:
      - databases
      summary: List available databases
      description: |
        This operation will output list of all available databases
      operationId: describeDatabases
      parameters:
      - name: sort_order
        in: query
        description: Sort Order
        schema:
          type: string
          enum:
          - asc
          - desc
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Databases'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
    post:
      tags:
      - databases
      summary: Create new database
      description: |
        This operation will create new database. If database is already exists, then error will be returned.
      operationId: createDatabase
      requestBody:
        description: Database definition
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Database'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
  /db/{database}:
    delete:
      tags:
      - databases
      summary: Drop database
      description: "This operation will remove complete database from memory and disk.\
        \ \nAll data, including namespaces, their documents and indexes will be erased.\
        \ \nCan not be undone. USE WITH CAUTION.\n"
      operationId: dropDatabase
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces:
    get:
      tags:
      - namespaces
      summary: List available namespaces
      description: |
        This operation will list all available namespaces in specified database.
        If database is not exists, then error will be returned.
      operationId: describeNamespaces
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: sort_order
        in: query
        description: Sort Order
        schema:
          type: string
          enum:
          - asc
          - desc
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespaces'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
    post:
      tags:
      - namespaces
      summary: Create namespace
      description: |
        This operation will create new namespace in specified database.
        If namespace is already exists, then operation do not nothing.
      operationId: openNamespace
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      requestBody:
        description: Namespace definition
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Namespace'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
  /db/{database}/namespaces/{name}:
    get:
      tags:
      - namespaces
      summary: Get namespace description
      description: |
        This operation will return specified namespace description, including options of namespace, and available indexes
      operationId: describeCurrNamespace
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
    delete:
      tags:
      - namespaces
      summary: Drop namespace
      description: |
        This operation will delete completely namespace from memory and disk.
        All documents, indexes and metadata from namespace will be removed.
        Can not be undone. USE WITH CAUTION.
      operationId: dropNamespace
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/{name}/truncate:
    delete:
      tags:
      - namespaces
      summary: Truncate namespace
      description: |
        This operation will delete all items from namespace.
      operationId: truncateNamespace
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/{name}/rename/{newname}:
    get:
      tags:
      - namespaces
      summary: Rename namespace
      description: |
        This operation will rename namespace.
      operationId: renameNamespace
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      - name: newname
        in: path
        description: Namespace new name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/{name}/metalist:
    get:
      tags:
      - namespaces
      summary: Get list of namespace's meta info
      description: |
        This operation will return list of keys of all meta of specified namespace
      operationId: getNamespaceMetalist
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      - name: sort_order
        in: query
        description: Sort Order
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: with_values
        in: query
        description: Include values in response
        schema:
          type: boolean
          default: false
      - name: offset
        in: query
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        description: If 0 - no limit
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaListResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/{name}/metabykey/{key}:
    get:
      tags:
      - namespaces
      summary: Get namespace's meta info by key
      description: |
        This operation will return value of namespace's meta with specified key
      operationId: getNamespaceMetaByKey
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: Meta key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaByKeyResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
    delete:
      tags:
      - namespaces
      summary: Remove namespace's meta info for key
      description: |
        This operation will remove meta with specified key from namespace
      operationId: deleteNamespaceMetaByKey
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: Meta key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/{name}/metabykey:
    put:
      tags:
      - namespaces
      summary: Put namespace's meta info with specified key and value
      description: |
        This operation will set namespace's meta with specified key and value
      operationId: putNamespaceMetaByKey
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      requestBody:
        description: Meta info
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MetaInfo'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: meta_info
  /db/{database}/namespaces/{name}/items:
    get:
      tags:
      - items
      summary: Get documents from namespace
      description: |
        This operation will select documents from namespace with specified filters, and sort them by specified sort order. Paging with limit and offset are supported.
      operationId: getItems
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Maximum count of returned items
        schema:
          type: integer
      - name: offset
        in: query
        description: Offset of first returned item
        schema:
          type: integer
      - name: sort_field
        in: query
        description: Sort Field
        schema:
          type: string
      - name: sort_order
        in: query
        description: Sort Order
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: filter
        in: query
        description: "Filter with SQL syntax, e.g: field1 = 'v1' AND field2 > 'v2'"
        schema:
          type: string
      - name: fields
        in: query
        description: Comma-separated list of returned fields
        schema:
          type: string
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
          - csv-file
      - name: sharding
        in: query
        description: if off then get items from current node only
        schema:
          type: string
          enum:
          - "true"
          - "false"
      - name: with_shard_ids
        in: query
        description: "if sharding is enabled, then add the #shard_id field to the\
          \ item"
        schema:
          type: string
          enum:
          - "true"
          - "false"
      - name: with_vectors
        in: query
        description: if off then vectors fields will be omitted
        schema:
          type: string
          enum:
          - "true"
          - "false"
      - name: with_columns
        in: query
        description: Return columns names and widths for table format output
        schema:
          type: string
          enum:
          - "true"
          - "false"
      - name: width
        in: query
        description: Total width in rows of view for table format output
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
    put:
      tags:
      - items
      summary: Update documents in namespace
      description: |
        This operation will UPDATE documents in namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      operationId: putItems
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      - name: precepts
        in: query
        description: Precepts to be done
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsUpdateResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
    post:
      tags:
      - items
      summary: Insert documents to namespace
      description: |
        This operation will INSERT documents to namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      operationId: postItems
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      - name: precepts
        in: query
        description: Precepts to be done
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsUpdateResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
    delete:
      tags:
      - items
      summary: Delete documents from namespace
      description: |
        This operation will DELETE documents from namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100}
        {"id":101}
        ...
        ```
      operationId: deleteItems
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      - name: precepts
        in: query
        description: Precepts to be done
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsUpdateResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
    patch:
      tags:
      - items
      summary: Upsert documents in namespace
      description: |
        This operation will UPSERT documents in namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      operationId: patchItems
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      - name: precepts
        in: query
        description: Precepts to be done
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemsUpdateResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
  /db/{database}/namespaces/{name}/indexes:
    get:
      tags:
      - indexes
      summary: List available indexes
      description: |
        This operation will return list of available indexes, from specified database and namespace.
      operationId: describeIndexes
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Indexes'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
    put:
      tags:
      - indexes
      summary: Update index in namespace
      description: |
        This operation will update index parameters. E.g. type of field or type of index.
        Operation synchronous, so it can take long time, if namespace contains bunch of documents
      operationId: putIndex
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      requestBody:
        description: Index definition
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Index'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
    post:
      tags:
      - indexes
      summary: Add new index to namespace
      description: |
        This operation will create new index. If index is already exists with the different parameters, then error will be returned.
        Operation synchronous, so it can take long time, if namespace contains bunch of documents.
      operationId: postIndex
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      requestBody:
        description: Index definition
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Index'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
  /db/{database}/namespaces/{name}/indexes/{indexname}:
    delete:
      tags:
      - indexes
      summary: Drop index from namespace
      description: |
        This operation will remove index from namespace. No data will be erased.
        Operation synchronous, so it can take long time, if namespace contains bunch of documents.
      operationId: deleteIndex
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      - name: indexname
        in: path
        description: Index name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/{name}/schema:
    get:
      tags:
      - schema
      summary: Get namespace schema
      description: This operation will return current schema from specified database
        and namespace
      operationId: getSchema
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaDef'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
    put:
      tags:
      - schema
      summary: Set namespace schema
      description: |
        This operation will set namespace schema (information about available fields and field types)
      operationId: putSchema
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      requestBody:
        description: This operation will put new schema for specified database and
          namespace
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SchemaDef'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
  /db/{database}/protobuf_schema:
    get:
      tags:
      - schema
      summary: Get protobuf communication parameters schema
      description: |
        This operation allows to get client/server communication parameters as google protobuf schema (content of .proto file)
      operationId: getNsParamsSchema
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: ns
        in: query
        description: Namespace name
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Invalid arguments supplied
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/query:
    get:
      tags:
      - queries
      summary: Query documents from namespace
      description: "This operation queries documents from namespace by SQL query.\
        \ Query can be preceded by `EXPLAIN` statement, then query execution plan\
        \ will be returned with query results. \nTwo level paging is supported. At\
        \ first, applied normal SQL `LIMIT` and `OFFSET`,\nthen `limit` and `offset`\
        \ from http request.\n"
      operationId: getQuery
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: SQL query
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Maximum count of returned items
        schema:
          type: integer
      - name: offset
        in: query
        description: Offset of first returned item
        schema:
          type: integer
      - name: with_columns
        in: query
        description: Return columns names and widths for table format output
        schema:
          type: boolean
      - name: width
        in: query
        description: Total width in rows of view for table format output
        schema:
          type: integer
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
          - csv-file
      - name: sharding
        in: query
        description: if off then execute SQL query on current node
        schema:
          type: string
          enum:
          - "true"
          - "false"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryItems'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
    put:
      tags:
      - queries
      summary: Update documents in namespace
      description: |
        This operation updates documents in namespace by DSL query.
      operationId: updateQuery
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      requestBody:
        description: DSL query
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Query'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
    post:
      tags:
      - queries
      summary: Query documents from namespace
      description: |
        This operation queries documents from namespace by DSL query.
      operationId: postQuery
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: with_columns
        in: query
        description: Return columns names and widths for table format output
        schema:
          type: boolean
      - name: width
        in: query
        description: Total width in rows of view for table format output
        schema:
          type: integer
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
          - csv-file
      requestBody:
        description: DSL query
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Query'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryItems'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
    delete:
      tags:
      - queries
      summary: Delete documents from namespace
      description: |
        This operation removes documents from namespace by DSL query.
      operationId: deleteQuery
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      requestBody:
        description: DSL query
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Query'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
  /db/{database}/namespaces/{name}/transactions/begin:
    post:
      tags:
      - transactions
      summary: Begin transaction to namespace
      operationId: beginTx
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Namespace name
        required: true
        schema:
          type: string
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeginTransactionResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/transactions/{tx_id}/commit:
    post:
      tags:
      - transactions
      summary: Commit transaction
      operationId: commitTx
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: tx_id
        in: path
        description: transaction id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/transactions/{tx_id}/rollback:
    post:
      tags:
      - transactions
      summary: Rollback transaction
      operationId: rollbackTx
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: tx_id
        in: path
        description: transaction id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/transactions/{tx_id}/items:
    put:
      tags:
      - transactions
      summary: Update documents in namespace via transaction
      description: |
        This will add UPDATE operation into transaction.
        It UPDATEs documents in namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      operationId: putItemsTx
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: tx_id
        in: path
        description: transaction id
        required: true
        schema:
          type: string
      - name: precepts
        in: query
        description: Precepts to be done
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
    post:
      tags:
      - transactions
      summary: Insert documents to namespace via transaction
      description: |
        This will add INSERT operation into transaction.
        It INSERTs documents to namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      operationId: postItemsTx
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: tx_id
        in: path
        description: transaction id
        required: true
        schema:
          type: string
      - name: precepts
        in: query
        description: Precepts to be done
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
    delete:
      tags:
      - transactions
      summary: Delete documents from namespace via transaction
      description: |
        This will add DELETE operation into transaction.
        It DELETEs documents from namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100}
        {"id":101}
        ...
        ```
      operationId: deleteItemsTx
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: precepts
        in: query
        description: Precepts to be done
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: tx_id
        in: path
        description: transaction id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
    patch:
      tags:
      - transactions
      summary: Upsert documents in namespace via transaction
      description: |
        This will add UPSERT operation into transaction.
        It UPDATEs documents in namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      operationId: patchItemsTx
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: tx_id
        in: path
        description: transaction id
        required: true
        schema:
          type: string
      - name: precepts
        in: query
        description: Precepts to be done
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
      requestBody:
        content:
          '*/*':
            schema:
              type: object
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
  /db/{database}/transactions/{tx_id}/query:
    get:
      tags:
      - transactions
      summary: Delete/update queries for transactions
      description: |
        This will add DELETE/UPDATE SQL query into transaction.
        This query UPDATEs/DELETEs documents from namespace
      operationId: getQueryTx
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: tx_id
        in: path
        description: transaction id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: SQL query
        required: true
        schema:
          type: string
      - name: width
        in: query
        description: Total width in rows of view for table format output
        schema:
          type: integer
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
    delete:
      tags:
      - transactions
      summary: Delete documents from namespace (transactions)
      description: |
        This will add DELETE query into transaction.
        DELETE query removes documents from namespace by DSL query.
      operationId: deleteQueryTx
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: tx_id
        in: path
        description: transaction id
        required: true
        schema:
          type: string
      - name: tx_id
        in: query
        description: transaction id
        schema:
          type: string
      requestBody:
        description: DSL query
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Query'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
  /db/{database}/suggest:
    get:
      tags:
      - queries
      summary: Suggest for autocompletion of SQL query
      description: |
        This operation pareses SQL query, and suggests autocompletion variants
      operationId: getSuggest
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: SQL query
        required: true
        schema:
          type: string
      - name: pos
        in: query
        description: Cursor position for suggest
        required: true
        schema:
          type: integer
      - name: line
        in: query
        description: Cursor line for suggest
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestItems'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/sqlquery:
    post:
      tags:
      - queries
      summary: Query documents from namespace
      description: |
        This operation queries documents from namespace by SQL query. Query can be preceded by `EXPLAIN` statement, then query execution plan will be returned with query results.
      operationId: postSQLQuery
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: with_columns
        in: query
        description: Return columns names and widths for table format output
        schema:
          type: boolean
      - name: width
        in: query
        description: Total width in rows of view for table format output
        schema:
          type: integer
      - name: format
        in: query
        description: encoding data format
        schema:
          type: string
          enum:
          - json
          - msgpack
          - protobuf
          - csv-file
      requestBody:
        description: SQL query
        content:
          '*/*':
            schema:
              type: string
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryItems'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: q
  /check:
    get:
      tags:
      - system
      summary: Get system information
      description: "This operation will return system information about server version,\
        \ uptime, and resources consumption"
      operationId: getSysInfo
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SysInfo'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /allocator/drop_cache:
    post:
      tags:
      - system
      summary: Try to release free memory back to the operating system for reuse by
        other applications.
      description: Try to release free memory back to the operating system for reuse.
        Only for tcmalloc allocator.
      operationId: postAllocatorDropCache
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /allocator/info:
    get:
      tags:
      - system
      summary: Get memory usage information
      description: This operation will return memory usage information from tcmalloc
        allocator.
      operationId: getAllocatorInfo
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /user/role:
    get:
      tags:
      - system
      summary: Get user role
      description: "Get the role of the currently authorized user in the Reindexer.\
        \ If authorization is disabled, the owner's role is returned"
      operationId: getUserRole
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoleResponse'
        "401":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/%23activitystats/items:
    get:
      tags:
      - system
      summary: Get activity stats information
      description: This operation will return detailed information about current activity
        of all connected to the database clients
      operationId: getActivityStats
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityStats'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/%23clientsstats/items:
    get:
      tags:
      - system
      summary: Get client connection information
      description: This operation will return detailed information about all connections
        on the server
      operationId: getClientsStats
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientsStats'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/%23replicationstats/items:
    get:
      tags:
      - system
      summary: Get replication statistics
      description: This operation will return detailed information about replication
        status on this node or cluster
      operationId: getGlobalReplicationStats
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      - name: filter
        in: query
        description: "Filter with SQL syntax, e.g: field1 = 'v1' AND field2 > 'v2'.\
          \ Has to filter by 'type' field: either 'async' or 'cluster'"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalReplicationStats'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/%23memstats/items:
    get:
      tags:
      - system
      summary: Get memory stats information
      description: This operation will return detailed information about database
        memory consumption
      operationId: getMemStats
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseMemStats'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/%23perfstats/items:
    get:
      tags:
      - system
      summary: Get performance stats information
      description: This operation will return detailed information about database
        performance timings. By default performance stats is turned off.
      operationId: getPerfStats
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabasePerfStats'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/%23queriesperfstats/items:
    get:
      tags:
      - system
      summary: Get SELECT queries performance stats information
      description: This operation will return detailed information about database
        memory consumption. By default quires performance stat is turned off.
      operationId: getQueriesPerfStats
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueriesPerfStats'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/{database}/namespaces/%23config/items:
    get:
      tags:
      - system
      summary: Get system configs
      description: This operation will return system configs
      operationId: getSystemConfigs
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfigItems'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'  
    put:
      tags:
      - system
      summary: Update system config
      description: |
        This operation will update system configuration:
        - profiling configuration. It is used to enable recording of queries and overall performance;
        - log queries configuration.
      operationId: putSystemConfig
      parameters:
      - name: database
        in: path
        description: Database name
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SystemConfigItem'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "404":
          description: Entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /db/default_configs:
    get:
      tags:
      - system
      summary: Get default system configs
      description: This operation will return default system configs.
      operationId: getDefaultSystemConfigs
      parameters:
      - name: type
        in: query
        description: Config type
        required: true
        schema:
          type: string
          default: namespaces
          enum:
          - namespaces
          - replication
          - async_replication
          - profiling
          - embedders
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfigItem'
        "400":
          description: Invalid arguments supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "408":
          description: Context timeout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        "500":
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      x-codegen-request-body-name: body
components:
  schemas:
    SysInfo:
      type: object
      properties:
        version:
          type: string
          description: Server version
        uptime:
          type: integer
          description: Server uptime in seconds
        start_time:
          type: integer
          description: Server start time in unix timestamp
        heap_size:
          type: integer
          description: Current heap size in bytes
        current_allocated_bytes:
          type: integer
          description: Current inuse allocated memory size in bytes
        pageheap_free:
          type: integer
          description: Heap free size in bytes
        pageheap_unmapped:
          type: integer
          description: Unmapped free heap size in bytes
        rpc_address:
          type: string
          description: RPC server address
        http_address:
          type: string
          description: HTTP server address
        storage_path:
          type: string
          description: Path to storage
        rpc_log:
          type: string
          description: RPC server log path
        http_log:
          type: string
          description: HTTP server log path
        core_log:
          type: string
          description: Reindexer core log path
        server_log:
          type: string
          description: Reindexer server log path
        log_level:
          type: string
          description: "Log level, should be one of these: trace, debug, info, warning,\
            \ error, critical"
    ActivityStats:
      type: object
      properties:
        total_items:
          type: integer
          description: "Total count of documents, matched specified filters"
        items:
          type: array
          items:
            required:
            - client
            - query
            - query_id
            - query_start
            - state
            type: object
            properties:
              client:
                type: string
                description: Client identifier
              user:
                type: string
                description: User name
              query:
                type: string
                description: Query text
              query_id:
                type: integer
                description: Query identifier
              query_start:
                type: string
                description: Query start time
              state:
                type: string
                description: Current operation state
                enum:
                - in_progress
                - wait_lock
                - sending
                - indexes_lookup
                - select_loop
                - proxied_via_cluster_proxy
                - proxied_via_sharding_proxy
              lock_description:
                type: string
    ClientsStats:
      type: object
      properties:
        total_items:
          type: integer
          description: Count of connected clients
        items:
          type: array
          items:
            required:
            - app_name
            - client_version
            - connection_id
            - current_activity
            - db_name
            - ip
            - recv_bytes
            - sent_bytes
            - start_time
            - tx_count
            - user_name
            - user_rights
            type: object
            properties:
              connection_id:
                type: integer
                description: Connection identifier
              ip:
                type: string
                description: Ip
              user_name:
                type: string
                description: User name
              user_rights:
                type: string
                description: User right
              db_name:
                type: string
                description: Database name
              current_activity:
                type: string
                description: Current activity
              start_time:
                type: integer
                description: Server start time in unix timestamp
              recv_bytes:
                type: integer
                description: Receive byte
              sent_bytes:
                type: integer
                description: Send byte
              client_version:
                type: string
                description: Client version string
              app_name:
                type: string
                description: Client's application name
              tx_count:
                type: integer
                description: Count of currently opened transactions for this client
              send_buf_bytes:
                type: integer
                description: Send buffer size
              last_send_ts:
                type: integer
                description: Timestamp of last send operation (ms)
              last_recv_ts:
                type: integer
                description: Timestamp of last recv operation (ms)
              send_rate:
                type: integer
                description: Current send rate (bytes/s)
              recv_rate:
                type: integer
                description: Current recv rate (bytes/s)
    ReplicationSyncStat:
      required:
      - avg_time_us
      - count
      - max_time_us
      type: object
      properties:
        count:
          type: integer
          description: Syncs count
        avg_time_us:
          type: integer
          description: Average sync time
        max_time_us:
          type: integer
          description: Max sync time
    GlobalReplicationStats:
      type: object
      properties:
        total_items:
          type: integer
          description: Total replication stat items count
        items:
          type: array
          items:
            required:
            - allocated_updates_count
            - allocated_updates_size
            - force_sync
            - nodes
            - pending_updates_count
            - type
            - wal_sync
            type: object
            properties:
              type:
                type: string
                description: Replication type. Either 'async' or 'cluster'
              wal_sync:
                $ref: '#/components/schemas/ReplicationSyncStat'
              force_sync:
                $ref: '#/components/schemas/ReplicationSyncStat'
              initial_sync:
                required:
                - force_sync
                - total_time_us
                - wal_sync
                type: object
                properties:
                  wal_sync:
                    $ref: '#/components/schemas/ReplicationSyncStat'
                  force_sync:
                    $ref: '#/components/schemas/ReplicationSyncStat'
                  total_time_us:
                    type: integer
                    description: Total time of initial sync
              pending_updates_count:
                type: integer
                description: "number of online updates waiting to be replicated"
              allocated_updates_count:
                type: integer
                description: "number of online updates waiting to be released"
              allocated_updates_size:
                type: integer
                description: total online updates' size in bytes
              nodes:
                type: array
                description: info about each node
                items:
                  required:
                  - dsn
                  - namespaces
                  - pending_updates_count
                  - role
                  - server_id
                  - status
                  type: object
                  properties:
                    dsn:
                      type: string
                      description: node's dsn
                    server_id:
                      type: integer
                      description: node's server id
                    pending_updates_count:
                      type: integer
                      description: "online updates waiting to be replicated to this node"
                    status:
                      type: string
                      description: network status
                      enum:
                      - none
                      - offline
                      - online
                    role:
                      type: string
                      description: replication role
                      enum:
                      - none
                      - follower
                      - leader
                      - candidate
                    replication_mode:
                      type: string
                      description: replication mode for mixed 'sync cluster + async
                        replication' configs
                      enum:
                      - default
                      - from_sync_leader
                    is_synchronized:
                      type: boolean
                      description: shows synchronization state for raft-cluster node
                        (false if node is outdated)
                    namespaces:
                      type: array
                      description: "list of namespaces, which are configure for this\
                        \ node"
                      items:
                        type: string
    Databases:
      type: object
      properties:
        total_items:
          type: integer
          description: Total count of databases
        items:
          type: array
          items:
            type: string
            description: Name of database
    Database:
      type: object
      properties:
        name:
          pattern: "^[A-Za-z0-9_\\-]*$"
          type: string
          description: Name of database
    Namespaces:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Name of namespace
        total_items:
          type: integer
          description: Total count of namespaces
    Namespace:
      type: object
      properties:
        name:
          pattern: "^[A-Za-z0-9_\\-]*$"
          type: string
          description: Name of namespace
        storage:
          type: object
          properties:
            enabled:
              type: boolean
              description: "If true, then documents will be stored to disc storage,\
                \ else all data will be lost on server shutdown"
        indexes:
          type: array
          items:
            $ref: '#/components/schemas/Index'
    Index:
      required:
      - field_type
      - index_type
      - json_paths
      - name
      type: object
      properties:
        name:
          pattern: "^[A-Za-z0-9_\\-]*$"
          type: string
          description: "Name of index, can contains letters, digits and underscores"
          default: id
        json_paths:
          minItems: 1
          type: array
          description: "Fields path in json object, e.g 'id' or 'subobject.field'.\
            \ If index is 'composite' or 'is_array', than multiple json_paths can\
            \ be specified, and index will get values from all specified fields."
          items:
            type: string
            default: id
        field_type:
          type: string
          description: Field data type
          enum:
          - int
          - int64
          - double
          - string
          - bool
          - composite
          - point
        index_type:
          type: string
          description: Index structure type
          default: hash
          enum:
          - hash
          - tree
          - text
          - rtree
          - ttl
          - "-"
        expire_after:
          type: integer
          description: "Specify, time to live for ttl index, in seconds"
        is_pk:
          type: boolean
          description: "Specifies, that index is primary key. The update operations\
            \ will checks, that PK field is unique. The namespace MUST have only 1\
            \ PK index"
        is_array:
          type: boolean
          description: "Specifies, that index is array. Array indexes can work with\
            \ array fields, or work with multiple fields"
          default: false
        is_dense:
          type: boolean
          description: "Reduces the index size. For hash and tree it will save ~8\
            \ bytes per unique key value. Useful for indexes with high selectivity,\
            \ but for tree and hash indexes with low selectivity can seriously decrease\
            \ update performance;"
          default: false
        is_no_column:
          type: boolean
          description: "Reduces the index size. Allows to save ~(`stored_type_size` * `namespace_items_count`) bytes,\
            \ where `stored_type_size` is the size of the type stored in the index, and `namespace_items_count`\
            \ is the number of items in the namespace. May reduce performance;"
          default: false
        is_sparse:
          type: boolean
          description: "Value of index may not present in the document, and therefore,\
            \ reduce data size but decreases speed operations on index"
          default: false
        rtree_type:
          type: string
          description: Algorithm to construct RTree index
          default: rstar
          enum:
          - linear
          - quadratic
          - greene
          - rstar
        is_simple_tag:
          type: boolean
          description: "Use simple tag instead of actual index, which will notice\
            \ rx about possible field name for strict policies"
          default: false
        collate_mode:
          type: string
          description: String collate mode
          default: none
          enum:
          - none
          - ascii
          - utf8
          - numeric
        sort_order_letters:
          type: string
          description: Sort order letters
          default: ""
        config:
          oneOf:
            - $ref: '#/components/schemas/FulltextConfig'
            - $ref: '#/components/schemas/FloatVectorConfig'
    JsonObjectDef:
      type: object
      properties:
        required:
          type: array
          description: Array of required fieldsl. Allowed for objects only
          items:
            type: string
        properties:
          type: object
          properties:
            field1:
              $ref: '#/components/schemas/JsonObjectDef'
            field2:
              $ref: '#/components/schemas/JsonObjectDef'
        items:
          $ref: '#/components/schemas/JsonObjectDef'
        additionalProperties:
          type: boolean
          description: Allow additional fields in this schema level. Allowed for objects
            only
          default: false
        type:
          type: string
          description: Entity type
          enum:
          - object
          - string
          - number
          - array
    SchemaDef:
      $ref: '#/components/schemas/JsonObjectDef'
    UpdateField:
      required:
      - name
      - values
      type: object
      properties:
        name:
          type: string
          description: field name
        type:
          type: string
          description: update entry type
          enum:
          - object
          - expression
          - value
        is_array:
          type: boolean
          description: is updated value an array
        values:
          type: array
          description: Values to update field with
          items:
            type: object
            properties: {}
    Query:
      required:
      - namespace
      type: object
      properties:
        namespace:
          type: string
          description: Namespace name
        type:
          type: string
          description: Type of query
          enum:
          - select
          - update
          - delete
          - truncate
        limit:
          type: integer
          description: Maximum count of returned items
        offset:
          type: integer
          description: Offset of first returned item
        req_total:
          type: string
          description: "Ask query to calculate total documents, match condition"
          default: disabled
          enum:
          - disabled
          - enabled
          - cached
        filters:
          type: array
          description: Filter for results documents
          items:
            $ref: '#/components/schemas/FilterDef'
        sort:
          type: array
          description: Specifies results sorting order
          items:
            $ref: '#/components/schemas/SortDef'
        merge_queries:
          type: array
          description: Merged queries to be merged with main query
          items:
            $ref: '#/components/schemas/Query'
        select_filter:
          type: array
          description: "Filter fields of returned document. Can be dot separated,\
            \ e.g 'subobject.field'"
          items:
            type: string
            default: id
        select_functions:
          type: array
          description: Add extra select functions to query
          items:
            type: string
        drop_fields:
          type: array
          description: List of fields to be dropped
          items:
            type: string
        update_fields:
          type: array
          description: Fields to be updated
          items:
            $ref: '#/components/schemas/UpdateField'
        aggregations:
          type: array
          description: Ask query calculate aggregation
          items:
            $ref: '#/components/schemas/AggregationsDef'
        explain:
          type: boolean
          description: Add query execution explain information
          default: false
        select_with_rank:
          type: boolean
          description: Output fulltext or KNN rank in QueryResult. Allowed only with fulltext or KNN queries
            query
          default: false
        strict_mode:
          type: string
          description: Strict mode for query. Adds additional check for fields('names')/indexes('indexes')
            existence in sorting and filtering conditions
          default: names
          enum:
          - none
          - names
          - indexes
    SubQuery:
      required:
      - namespace
      type: object
      properties:
        namespace:
          type: string
          description: Namespace name
        limit:
          type: integer
          description: Maximum count of returned items
        offset:
          type: integer
          description: Offset of first returned item
        req_total:
          type: string
          description: "Ask query to calculate total documents, match condition"
          default: disabled
          enum:
          - disabled
          - enabled
          - cached
        filters:
          type: array
          description: Filter for results documents
          items:
            $ref: '#/components/schemas/FilterDef'
        sort:
          type: array
          description: Specifies results sorting order
          items:
            $ref: '#/components/schemas/SortDef'
        select_filter:
          type: array
          description: "Filter fields of returned document. Can be dot separated,\
            \ e.g 'subobject.field'"
          items:
            type: string
            default: id
        aggregations:
          type: array
          description: Ask query calculate aggregation
          items:
            $ref: '#/components/schemas/SubQueryAggregationsDef'
      description: "Subquery object. It must contain either 'select_filters' for the\
        \ single field, single aggregation or must be matched against 'is null'/'is\
        \ not null conditions'"
    EqualPositionDef:
      type: object
      properties:
        positions:
          type: array
          items:
            type: string
      description: Array fields to be searched with equal array indexes
    FilterDef:
      type: object
      properties:
        field:
          type: string
          description: Field json path or index name for filter
        cond:
          type: string
          description: Condition operator
          enum:
          - EQ
          - GT
          - GE
          - LE
          - LT
          - SET
          - ALLSET
          - EMPTY
          - RANGE
          - LIKE
          - DWITHIN
          - KNN
        op:
          type: string
          description: Logic operator
          enum:
          - AND
          - OR
          - NOT
        value:
          type: object
          properties: {}
          description: "Value of filter. Single integer or string for EQ, GT, GE,\
            \ LE, LT condition, array of 2 elements for RANGE condition, variable\
            \ len array for SET and ALLSET conditions, or something like that:\
            \ '[[1, -3.5], 5.0]' for DWITHIN, or float vector for KNN"
        filters:
          type: array
          description: Filter for results documents
          items:
            $ref: '#/components/schemas/FilterDef'
        join_query:
          $ref: '#/components/schemas/JoinedDef'
        first_field:
          type: string
          description: First field json path or index name for filter by two fields
        second_field:
          type: string
          description: Second field json path or index name for filter by two fields
        subquery:
          $ref: '#/components/schemas/SubQuery'
        always:
          type: boolean
          description: Boolean constant
        equal_positions:
          type: array
          description: Array of array fields to be searched with equal array indexes
          items:
            $ref: '#/components/schemas/EqualPositionDef'
        params:
          $ref: '#/components/schemas/KnnSearchParamsDef'
      description: "If contains 'filters' then cannot contain 'cond', 'field' and\
        \ 'value'. If not contains 'filters' then 'field' and 'cond' are required."
    KnnSearchParamsDef:
      type: object
      properties:
        k:
          type: integer
          description: Maximum count of returned vectors in KNN queries
        radius:
          type: number
          description: Raduis for filtering vectors by metric
          format: float
        ef:
          type: integer
          description: Applicable for HNSW index only. The size of the dynamic list
            for the nearest neighbors used during a query. Ef must be >= K. Default
            value = K
        nprobe:
          minimum: 1
          type: integer
          description: Applicable for IVF index only. The number of Voronoi cells
            to search during a query
      anyOf:
        - required: [k]
        - required: [radius]
      description: Parameters for knn search
    SortDef:
      required:
      - field
      type: object
      properties:
        field:
          type: string
          description: Field or index name for sorting
        values:
          type: array
          description: "Optional: Documents with this values of field will be returned\
            \ first"
          items:
            type: object
            properties: {}
        desc:
          type: boolean
          description: Descent or ascent sorting direction
      description: Specifies results sorting order
    JoinedDef:
      required:
      - namespace
      - "on"
      - type
      type: object
      properties:
        namespace:
          type: string
          description: Namespace name
        type:
          type: string
          description: Join type
          enum:
          - LEFT
          - INNER
          - ORINNER
        filters:
          type: array
          description: Filter for results documents
          items:
            $ref: '#/components/schemas/FilterDef'
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortDef'
        limit:
          type: integer
          description: Maximum count of returned items
        offset:
          type: integer
          description: Offset of first returned item
        "on":
          type: array
          description: Join ON statement
          items:
            $ref: '#/components/schemas/OnDef'
        select_filter:
          type: array
          description: "Filter fields of returned document. Can be dot separated,\
            \ e.g 'subobject.field'"
          items:
            type: string
    OnDef:
      required:
      - left_field
      - right_field
      - cond
      type: object
      properties:
        left_field:
          type: string
          description: Field from left namespace (main query namespace)
        right_field:
          type: string
          description: Field from right namespace (joined query namespace)
        cond:
          type: string
          description: Condition operator
          enum:
          - EQ
          - GT
          - GE
          - LE
          - LT
          - SET
        op:
          type: string
          description: Logic operator
          enum:
          - AND
          - OR
          - NOT
    AggregationsDef:
      required:
      - fields
      - type
      type: object
      properties:
        fields:
          type: array
          description: Fields or indexes names for aggregation function
          items:
            type: string
        type:
          type: string
          description: Aggregation function
          enum:
          - SUM
          - AVG
          - MIN
          - MAX
          - FACET
          - DISTINCT
        sort:
          type: array
          description: Specifies results sorting order. Allowed only for FACET
          items:
            $ref: '#/components/schemas/AggregationsSortDef'
        limit:
          minimum: 0
          type: integer
          description: Number of rows to get from result set. Allowed only for FACET
        offset:
          minimum: 0
          type: integer
          description: Index of the first row to get from result set. Allowed only
            for FACET
    SubQueryAggregationsDef:
      required:
      - fields
      - type
      type: object
      properties:
        fields:
          type: array
          description: Fields or indexes names for aggregation function
          items:
            type: string
        type:
          type: string
          description: Aggregation function
          enum:
          - SUM
          - AVG
          - MIN
          - MAX
    AggregationsSortDef:
      required:
      - field
      type: object
      properties:
        field:
          type: string
          description: Field or index name for sorting
        desc:
          type: boolean
          description: Descent or ascent sorting direction
      description: Specifies facet aggregations results sorting order
    FtStopWordObject:
      type: object
      properties:
        word:
          type: string
          description: Stop word
        is_morpheme:
          type: boolean
          description: "If the value is true, the word can be included in search results\
            \ in queries such as 'word*', 'word~' etc."
          default: false
    FloatVectorConfig:
      type: object
      required:
        - dimension
        - metric
      description: Float Vector Index configuration
      properties:
        dimension:
          type: integer
          minimum: 1
          description: Dimension of vectors in index
        metric:
          type: string
          enum:
          - 'l2'
          - 'inner_product'
          - 'cosine'
        start_size:
          type: integer
          minimum: 1000
          default: 1000
          description: Start size of index. Allowed for HNSW and Brute Force indexes only.
        m:
          type: integer
          minimum: 2
          maximum: 128
          default: 16
          description: Number of bi-directional links created for every new element during construction. Allowed for HNSW indexes only.
        ef_construction:
          type: integer
          minimum: 4
          maximum: 1024
          default: 200
          description: Size of dynamic list for the nearest neighbors used during construction. Allowed for HNSW indexes only.
        multithreading:
          type: integer
          enum:
            - 0
            - 1
          default: 0
          description: Multithread insertions. Allowed for HNSW indexes only.
        centroids_count:
          type: integer
          minimum: 1
          maximum: 65536
          description: Clusters count for construct IFV index. Required for IVF indexes. Allowed for IVF indexes only.
        radius:
          type: number
          description: Raduis for filtering vectors by metric in queries
          format: float
        embedding:
          type: object
          description: Embedding configuration
          properties:
            upsert_embedder:
              type: object
              required:
                - URL
              description: Upsert embedding configuration
              properties:
                name:
                  type: string
                  description: Embedder name. Optional
                URL:
                  type: string
                  description: Embed service URL
                cache_tag:
                  type: string
                  description: tag is used to cache results of injection
                fields:
                  type: array
                  items:
                    type: string
                  description: List of index fields to calculate embedding
                embedding_strategy:
                  type: string
                  enum:
                    - 'always'
                    - 'empty_only'
                    - 'strict'
                  default: 'always'
                  description: Embedding application strategy
                pool:
                  type: object
                  description: Connection pool configuration
                  properties:
                    connections:
                      type: integer
                      minimum: 1
                      maximum: 1024
                      default: 10
                      description: Number connections to service
                    connect_timeout_ms:
                      type: integer
                      minimum: 100
                      default: 300
                      description: Connection\reconnection timeout to any embedding service (milliseconds)
                    read_timeout_ms:
                      type: integer
                      minimum: 500
                      default: 5000
                      description: Timeout reading data from embedding service (milliseconds)
                    write_timeout_ms:
                      type: integer
                      minimum: 500
                      default: 5000
                      description: Timeout writing data from embedding service (milliseconds)
            query_embedder:
              type: object
              required:
                - URL
              description: Query embedding configuration
              properties:
                URL:
                  type: string
                  description: Embed service URL
                cache_tag:
                  type: string
                  description: tag is used to cache results of injection
                pool:
                  type: object
                  description: Connection pool configuration
                  properties:
                    connections:
                      type: integer
                      minimum: 1
                      maximum: 1024
                      default: 10
                      description: Number connections to service
                    connect_timeout_ms:
                      type: integer
                      minimum: 100
                      default: 300
                      description: Connection\reconnection timeout to any embedding service (milliseconds)
                    read_timeout_ms:
                      type: integer
                      minimum: 500
                      default: 5000
                      description: Timeout reading data from embedding service (milliseconds)
                    write_timeout_ms:
                      type: integer
                      minimum: 500
                      default: 5000
                      description: Timeout writing data from embedding service (milliseconds)
    FulltextConfig:
      type: object
      properties:
        enable_translit:
          type: boolean
          description: Enable russian translit variants processing. e.g. term 'luntik'
            will match word 'лунтик'
          default: true
        enable_numbers_search:
          type: boolean
          description: Enable number variants processing. e.g. term '100' will match
            words one hundred
          default: false
        enable_kb_layout:
          type: boolean
          description: Enable wrong keyboard layout variants processing. e.g. term
            'keynbr' will match word 'лунтик'
          default: true
        log_level:
          maximum: 4
          minimum: 0
          type: integer
          description: Log level of full text search engine
        merge_limit:
          maximum: 33554431
          minimum: 1
          type: integer
          description: "Maximum documents count which will be processed in merge query\
            \ results. Increasing this value may refine ranking of queries with high\
            \ frequency words, but will decrease search speed"
        word_part_delimiters:
          type: string
          description: List of symbols, which will be treated as word part delimiters
          default: -/+_`'
        min_word_part_size:
          type: integer
          description: Min word part size for indexing and searching
          default: 3
          minimum: 1
          maximum: 100
        extra_word_symbols:
          type: string
          description: "List of symbols, which will be treated as word part, all other\
            \ symbols will be treated as word separators, extra_word_symbols will be replenished\
            \ with word_part_delimiters automatically at startup"
          default: -/+_`'
        stop_words:
          type: array
          description: List of objects of stop words. Words from this list will be
            ignored when building indexes
          items:
            $ref: '#/components/schemas/FtStopWordObject'
        keep_diacritics:
          type: array
          description: List of symbol types to keep diacritics (e.g. acc/accent, ara/arabic, heb/hebrew, cyr/cyrillic)
          items:
            type: string
        stemmers:
          type: array
          description: List of stemmers to use
          items:
            type: string
        synonyms:
          type: array
          description: List of synonyms for replacement
          items:
            $ref: '#/components/schemas/FulltextSynonym'
        bm25_boost:
          maximum: 10
          minimum: 0
          type: number
          description: Boost of bm25 ranking
          format: float
          default: 1.0
        bm25_weight:
          maximum: 1
          minimum: 0
          type: number
          description: "Weight of bm25 rank in final rank 0: bm25 will not change\
            \ final rank. 1: bm25 will affect to final rank in 0 - 100% range"
          format: float
          default: 0.1
        distance_boost:
          maximum: 10
          minimum: 0
          type: number
          description: Boost of search query term distance in found document
          format: float
          default: 1.0
        distance_weight:
          maximum: 1
          minimum: 0
          type: number
          description: "Weight of search query terms distance in found document in\
            \ final rank 0: distance will not change final rank. 1: distance will\
            \ affect to final rank in 0 - 100% range"
          format: float
          default: 0.5
        term_len_boost:
          maximum: 10
          minimum: 0
          type: number
          description: Boost of search query term length
          format: float
          default: 1.0
        term_len_weight:
          maximum: 1
          minimum: 0
          type: number
          description: "Weight of search query term length in final rank. 0: term\
            \ length will not change final rank. 1: term length will affect to final\
            \ rank in 0 - 100% range"
          format: float
          default: 0.3
        position_boost:
          maximum: 10
          minimum: 0
          type: number
          description: Boost of search query term position
          format: float
          default: 1.0
        position_weight:
          maximum: 1
          minimum: 0
          type: number
          description: "Weight of search query term position in final rank. 0: term\
            \ position will not change final rank. 1: term position will affect to\
            \ final rank in 0 - 100% range"
          format: float
          default: 0.1
        full_match_boost:
          maximum: 10
          minimum: 0
          type: number
          description: Boost of full match of search phrase with doc
          format: float
          default: 1.1
        partial_match_decrease:
          maximum: 100
          minimum: 0
          type: integer
          description: "Decrease of relevancy in case of partial match by value: partial_match_decrease\
            \ * (non matched symbols) / (matched symbols)"
        min_relevancy:
          maximum: 1
          minimum: 0
          type: number
          description: "Minimum rank of found documents. 0: all found documents will\
            \ be returned 1: only documents with relevancy >= 100% will be returned "
          format: float
          default: 0.05
        max_typos:
          maximum: 4
          minimum: 0
          type: integer
          description: "Maximum possible typos in word. 0: typos is disabled, words\
            \ with typos will not match. N: words with N possible typos will match.\
            \ It is not recommended to set more than 2 possible typo -It will seriously\
            \ increase RAM usage, and decrease search speed"
        max_typo_len:
          maximum: 100
          minimum: 0
          type: integer
          description: Maximum word length for building and matching variants with
            typos.
        typos_detailed_config:
          type: object
          properties:
            max_typo_distance:
              maximum: 100
              minimum: -1
              type: integer
              description: Maximum distance between symbols in initial and target
                words to perform substitution
            max_symbol_permutation_distance:
              maximum: 100
              minimum: -1
              type: integer
              description: "Maximum distance between same symbols in initial and target\
                \ words to perform substitution (to handle cases, when two symbols\
                \ were switched with each other)"
            max_missing_letters:
              maximum: 2
              minimum: -1
              type: integer
              description: "Maximum number of symbols, which may be removed from the\
                \ initial term to transform it into the result word"
            max_extra_letters:
              maximum: 2
              minimum: -1
              type: integer
              description: "Maximum number of symbols, which may be added to the initial\
                \ term to transform it into the result word"
          description: Config for more precise typos algorithm tuning
        max_rebuild_steps:
          maximum: 500
          minimum: 0
          type: integer
          description: Maximum steps without full rebuild of ft - more steps faster
            commit slower select - optimal about 15.
        max_step_size:
          maximum: 1000000000
          minimum: 5
          type: integer
          description: Maximum unique words to step
        sum_ranks_by_fields_ratio:
          maximum: 1
          minimum: 0
          type: number
          description: "Ratio to summation of ranks of match one term in several fields.\
            \ For example, if value of this ratio is K, request is '@+f1,+f2,+f3 word',\
            \ ranks of match in fields are R1, R2, R3 and R2 < R1 < R3, final rank\
            \ will be R = R2 + K*R1 + K*K*R3"
          format: float
          default: 0.0
        optimization:
          type: string
          description: Optimize the index by memory or by cpu
          default: Memory
          enum:
          - Memory
          - CPU
        enable_preselect_before_ft:
          type: boolean
          description: Enable to execute others queries before the ft query
          default: false
        max_areas_in_doc:
          maximum: 1000000000
          type: number
          description: Max number of highlighted areas for each field in each document
            (for snippet() and highlight()). '-1' means unlimited
        max_total_areas_to_cache:
          maximum: 1000000000
          type: number
          description: "Max total number of highlighted areas in ft result, when result\
            \ still remains cacheable. '-1' means unlimited"
        bm25_config:
          type: object
          properties:
            bm25_k1:
              minimum: 0
              type: number
              description: "Coefficient k1 in the formula for calculating bm25. Coefficient\
                \ that sets the saturation threshold for the frequency of the term.\
                \ The higher the coefficient, the higher the threshold and the lower\
                \ the saturation rate."
              format: float
              default: 2.0
            bm25_b:
              maximum: 1
              minimum: 0
              type: number
              description: "Coefficient b in the formula for calculating bm25. If\
                \ b is bigger, the effects of the length of the document compared\
                \ to the average length are more amplified."
              format: float
              default: 0.75
            bm25_type:
              type: string
              description: "Formula for calculating document relevance (rx_bm25, bm25,\
                \ word_count)"
              default: rx_bm25
              enum:
              - rx_bm25
              - bm25
              - word_count
          description: Config for document ranking function
        fields:
          type: array
          description: Configuration for certain field if it differ from whole index
            configuration
          items:
            $ref: '#/components/schemas/FulltextFieldConfig'
        base_ranking:
          type: object
          properties:
            full_match_proc:
              maximum: 500
              minimum: 0
              type: integer
              description: Relevancy of full word match
            prefix_min_proc:
              maximum: 500
              minimum: 0
              type: integer
              description: Minimum relevancy of prefix word match
            suffix_min_proc:
              maximum: 500
              minimum: 0
              type: integer
              description: Minimum relevancy of suffix word match
            base_typo_proc:
              maximum: 500
              minimum: 0
              type: integer
              description: Base relevancy of typo match
            typo_proc_penalty:
              maximum: 500
              minimum: 0
              type: integer
              description: Extra penalty for each word's permutation (addition/deletion
                of the symbol) in typo algorithm
            stemmer_proc_penalty:
              maximum: 500
              minimum: 0
              type: integer
              description: "Penalty for the variants, created by stemming"
            kblayout_proc:
              maximum: 500
              minimum: 0
              type: integer
              description: Relevancy of the match in incorrect kblayout
            translit_proc:
              maximum: 500
              minimum: 0
              type: integer
              description: Relevancy of the match in translit
            synonyms_proc:
              maximum: 500
              minimum: 0
              type: integer
              description: Relevancy of the synonym match
            delimited_proc:
              maximum: 500
              minimum: 0
              type: integer
              description: Relevancy of the delimited word part match
          description: Config for subterm proc rank.
        splitter:
          type: string
          description: "Text tokenization algorithm. 'fast' - splits text by spaces,\
            \ special characters and unsupported UTF-8 symbols. Each token is a combination\
            \ of letters from supported UTF-8 subset, numbers and extra word symbols.\
            \ 'mmseg_cn' - algorithm based on friso implementation of mmseg for Chinese\
            \ and English"
          default: fast
          enum:
          - fast
          - mmseg_cn
      description: Fulltext Index configuration
    FulltextFieldConfig:
      type: object
      properties:
        field_name:
          type: string
          description: Field name
        bm25_boost:
          maximum: 10
          minimum: 0
          type: number
          description: Boost of bm25 ranking
          format: float
          default: 1.0
        bm25_weight:
          maximum: 1
          minimum: 0
          type: number
          description: "Weight of bm25 rank in final rank 0: bm25 will not change\
            \ final rank. 1: bm25 will affect to final rank in 0 - 100% range"
          format: float
          default: 0.1
        term_len_boost:
          maximum: 10
          minimum: 0
          type: number
          description: Boost of search query term length
          format: float
          default: 1.0
        term_len_weight:
          maximum: 1
          minimum: 0
          type: number
          description: "Weight of search query term length in final rank. 0: term\
            \ length will not change final rank. 1: term length will affect to final\
            \ rank in 0 - 100% range"
          format: float
          default: 0.3
        position_boost:
          maximum: 10
          minimum: 0
          type: number
          description: Boost of search query term position
          format: float
          default: 1.0
        position_weight:
          maximum: 1
          minimum: 0
          type: number
          description: "Weight of search query term position in final rank. 0: term\
            \ position will not change final rank. 1: term position will affect to\
            \ final rank in 0 - 100% range"
          format: float
          default: 0.1
      description: Configuration for certain field if it differ from whole index configuration
    FulltextSynonym:
      type: object
      properties:
        tokens:
          type: array
          description: "List source tokens in query, which will be replaced with alternatives"
          items:
            type: string
        alternatives:
          type: array
          description: "List of alternatives, which will be used for search documents"
          items:
            type: string
      description: Fulltext synonym definition
    MetaInfo:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      description: Meta info to be set
    MetaListResponse:
      required:
      - meta
      - total_items
      type: object
      properties:
        total_items:
          type: integer
          description: Total count of meta info in the namespace
        meta:
          type: array
          items:
            required:
            - key
            type: object
            properties:
              key:
                type: string
              value:
                type: string
                description: "Optional: Provided if 'with_values' = true"
      description: List of meta info of the specified namespace
    MetaByKeyResponse:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      description: Meta info of the specified namespace
    Items:
      type: object
      properties:
        total_items:
          type: integer
          description: "Total count of documents, matched specified filters"
        items:
          type: array
          description: "Documents, matched specified filters"
          items:
            type: object
            properties: {}
    SuggestItems:
      type: object
      properties:
        suggests:
          type: array
          description: Suggested query autocompletion variants
          items:
            type: string
    QueryItems:
      type: object
      properties:
        items:
          type: array
          description: "Documents, matched query"
          items:
            type: object
            properties: {}
        namespaces:
          type: array
          description: "Namespaces, used in query"
          items:
            type: string
        cache_enabled:
          type: boolean
          description: "Enables to client cache returned items. If false, then returned\
            \ items has been modified  by reindexer, e.g. by select filter, or by\
            \ functions, and can't be cached"
        query_total_items:
          type: integer
          description: "Total count of documents, matched query"
        aggregations:
          type: array
          description: Aggregation functions results
          items:
            $ref: '#/components/schemas/AggregationResDef'
        equal_position:
          type: array
          description: Array fields to be searched with equal array indexes
          items:
            type: string
        columns:
          type: array
          description: Columns for table output
          items:
            $ref: '#/components/schemas/QueryColumnDef'
        explain:
          $ref: '#/components/schemas/ExplainDef'
    Indexes:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Index'
        total_items:
          type: integer
          description: Total count of indexes
    ExplainDef:
      type: object
      properties:
        total_us:
          type: integer
          description: Total query execution time
        loop_us:
          type: integer
          description: Intersection loop time
        indexes_us:
          type: integer
          description: Indexes keys selection time
        postprocess_us:
          type: integer
          description: Query post process time
        preselect_us:
          type: integer
          description: Query preselect processing time
        prepare_us:
          type: integer
          description: Query prepare and optimize time
        general_sort_us:
          type: integer
          description: Result sort time
        sort_index:
          type: string
          description: "Index, which used for sort results"
        sort_by_uncommitted_index:
          type: boolean
          description: Optimization of sort by uncompleted index has been performed
        selectors:
          type: array
          description: "Filter selectors, used to process query conditions"
          items:
            type: object
            properties:
              method:
                type: string
                description: "Method, used to process condition"
                enum:
                - scan
                - index
                - inner_join
                - left_join
              field:
                type: string
                description: Field or index name
              field_type:
                type: string
                description: Shows which kind of the field was used for the filtration.
                  Non-indexed fields are usually really slow for 'scan' and should
                  be avoided
                enum:
                - non-indexed
                - indexed
              items:
                type: integer
                description: Count of scanned documents by this selector
              matched:
                type: integer
                description: "Count of processed documents, matched this selector"
              comparators:
                type: integer
                description: "Count of comparators used, for this selector"
              cost:
                type: integer
                description: Cost expectation of this selector
              keys:
                type: integer
                description: "Number of uniq keys, processed by this selector (may\
                  \ be incorrect, in case of internal query optimization/caching"
              condition:
                type: string
                description: Condition on the field
              type:
                type: string
                description: Select iterator type
                enum:
                - Comparator
                - TwoFieldsComparison
                - Skipped
                - Forward
                - Reverse
                - SingleRange
                - SingleIdset
                - SingleIdSetWithDeferedSort
                - RevSingleRange
                - RevSingleIdset
                - RevSingleIdSetWithDeferedSort
                - OnlyComparator
                - Unsorted
                - UnbuiltSortOrdersIndex
              description:
                type: string
                description: Description of the selector
              explain_preselect:
                $ref: '#/components/schemas/ExplainDef'
              explain_select:
                $ref: '#/components/schemas/ExplainDef'
        on_conditions_injections:
          type: array
          description: Describes Join ON conditions injections
          items:
            type: object
            properties:
              namespace:
                type: string
                description: Joinable ns name
              on_condition:
                type: string
                description: Original ON-conditions clause. SQL-like string
              total_time_us:
                type: integer
                description: Total amount of time spent on checking and substituting
                  all conditions
              success:
                type: boolean
                description: Result of injection attempt
              reason:
                type: string
                description: "Optional{succeed==false}. Explains condition injection\
                  \ failure"
              type:
                type: string
                description: "Values source: preselect values(by_value) or additional\
                  \ select(select)"
              injected_condition:
                type: string
                description: Injected condition. SQL-like string
              conditions:
                type: array
                description: Individual conditions processing results
                items:
                  type: object
                  properties:
                    condition:
                      type: string
                      description: single condition from Join ON section. SQL-like
                        string
                    total_time_us:
                      type: integer
                      description: total time elapsed from injection attempt start
                        till the end of substitution or rejection
                    explain_select:
                      $ref: '#/components/schemas/ExplainDef'
                    agg_type:
                      type: string
                      description: Optional. Aggregation type used in subquery
                      enum:
                      - min
                      - max
                      - distinct
                    success:
                      type: boolean
                      description: result of injection attempt
                    reason:
                      type: string
                      description: Optional. Explains condition injection failure
                    new_condition:
                      type: string
                      description: substituted injected condition. SQL-like string
                    values_count:
                      type: integer
                      description: resulting size of query values set
        subqueries:
          type: array
          description: Explain of subqueries preselect
          items:
            type: object
            properties:
              namespace:
                type: string
                description: Subquery's namespace name
              keys:
                type: integer
                description: Count of keys being compared with the subquery's result
              field:
                type: string
                description: Name of field being compared with the subquery's result
              explain:
                $ref: '#/components/schemas/ExplainDef'
      description: Explanations of query execution
    AggregationResDef:
      required:
      - fields
      - type
      type: object
      properties:
        fields:
          type: array
          description: Fields or indexes names for aggregation function
          items:
            type: string
        type:
          type: string
          description: Aggregation function
          enum:
          - SUM
          - AVG
          - MIN
          - MAX
          - FACET
          - DISTINCT
        value:
          type: number
          description: "Value, calculated by aggregator"
        facets:
          type: array
          description: "Facets, calculated by aggregator"
          items:
            required:
            - count
            - values
            type: object
            properties:
              values:
                type: array
                description: Facet fields values
                items:
                  type: string
              count:
                type: integer
                description: Count of elements these fields values
        distincts:
          type: array
          description: List of distinct values of the field
          items:
            oneOf:
              - $ref: '#/components/schemas/DistincOneItemDef'
              - $ref: '#/components/schemas/DistinctMultiItemDef'

    DistincOneItemDef:
            type: string

    DistinctMultiItemDef:
      type: array
      description: Distinct fields values
      items:
        type: string

    QueryColumnDef:
      type: object
      properties:
        name:
          type: string
          description: Column name
        width_percents:
          type: number
          description: Column width in percents of total width
        width_chars:
          type: number
          description: Column width in chars
        max_chars:
          type: number
          description: Maximum count of chars in column
      description: Query columns for table outputs
    StatusResponse:
      type: object
      properties:
        success:
          type: boolean
        response_code:
          type: integer
          description: Duplicates HTTP response code
        description:
          type: string
          description: Text description of error details
    ItemsUpdateResponse:
      type: object
      properties:
        updated:
          type: integer
          description: Count of updated items
        items:
          type: array
          description: Updated documents. Contains only if precepts were provided
          items:
            type: object
            properties: {}
    UpdateResponse:
      type: object
      properties:
        updated:
          type: integer
          description: Count of updated items
    DatabaseMemStats:
      type: object
      properties:
        total_items:
          type: integer
          description: "Total count of documents, matched specified filters"
        items:
          type: array
          description: "Documents, matched specified filters"
          items:
            $ref: '#/components/schemas/NamespaceMemStats'
    NamespaceMemStats:
      type: object
      properties:
        name:
          type: string
          description: Name of namespace
        type:
          type: string
          description: Type of namespace. For now it's 'namespace' or 'embedders'
        items_count:
          type: integer
          description: Total count of documents in namespace
        strings_waiting_to_be_deleted_size:
          type: integer
          description: "Size of strings deleted from namespace, but still used in\
            \ queryResults"
        updated_unix_nano:
          type: integer
          description: "[[deprecated]]. do not use"
        storage_ok:
          type: boolean
          description: "Status of disk storage (true, if storage is enabled and writable)"
        storage_enabled:
          type: boolean
          description: Shows if storage is enabled (however it may still be unavailable)
        storage_status:
          type: string
          description: "More detailed info about storage status. May contain 'OK',\
            \ 'DISABLED', 'NO SPACE LEFT' or last error description"
        storage_path:
          type: string
          description: Filesystem path to namespace storage
        optimization_completed:
          type: boolean
          description: Background indexes optimization has been completed
        total:
          type: object
          properties:
            data_size:
              type: integer
              description: "Total memory size of stored documents, including system\
                \ structures"
            indexes_size:
              type: integer
              description: Total memory consumption of namespace's indexes
            cache_size:
              type: integer
              description: Total memory consumption of namespace's caches. e.g. idset
                and join caches
            index_optimizer_memory:
              type: integer
              description: "Total memory size, occupation by index optimizer (in bytes)"
            inmemory_storage_size:
              type: integer
              description: "Total memory size, occupied by the AsyncStorage (in bytes)"
          description: Summary of total namespace memory consumption
        storage:
          type: object
          properties:
            proxy_size:
              type: integer
              description: "Total memory size, occupied by synchronous proxy map of the AsyncStorage (in bytes)"
          description: "Summary of total async storage memory consumption"
        join_cache:
          $ref: '#/components/schemas/JoinCacheMemStats'
        query_cache:
          $ref: '#/components/schemas/QueryCacheMemStats'
        replication:
          $ref: '#/components/schemas/ReplicationStats'
        indexes:
          type: array
          description: Memory consumption of each namespace index
          items:
            $ref: '#/components/schemas/IndexMemStat'
        embedding_caches:
          type: array
          description: Memory consumption of each embedder
          items:
            $ref: '#/components/schemas/EmbeddersCacheMemStat'
    IndexMemStat:
      type: object
      properties:
        name:
          type: string
          description: Name of index. There are special index with name `-tuple`.
            It's stores original document's json structure with non indexed fields
        unique_keys_count:
          type: integer
          description: Count of unique keys values stored in index
        idset_btree_size:
          type: integer
          description: Total memory consumption (in bytes) of reverse index b-tree structures.
            For `dense` and `store` indexes always 0
        idset_plain_size:
          type: integer
          description: Total memory consumption (in bytes) of reverse index vectors. For `store`
            indexes always 0
        sort_orders_size:
          type: integer
          description: "Total memory consumption (in bytes) of SORT statement and `GT`, `LT`\
            \ conditions optimized structures. Applicable only to `tree` indexes"
        idset_cache:
          $ref: '#/components/schemas/IndexCacheMemStats'
        indexing_struct_size:
          type: integer
          description: "Total memory consumption (in bytes) of the main indexing structures (fulltext,\
            \ ANN, etc.)"
        vectors_keeper_size:
          type: integer
          description: "Total memory consumation (in bytes) of shared vectors keeper structures (ANN indexes only)"
        data_size:
          type: integer
          description: "Total memory consumption (in bytes) of documents's data, held by index"
        tracked_updates_count:
          type: integer
          description: "Updates count, pending in index updates tracker"
        tracked_updates_buckets:
          type: integer
          description: Buckets count in index updates tracker map
        tracked_updates_size:
          type: integer
          description: Updates tracker map size in bytes
        tracked_updates_overflow:
          type: integer
          description: "Updates tracker map overflow (number of elements, stored outside\
            \ of the main buckets)"
        is_built:
          type: boolean
          description: "Shows whether KNN/fulltext indexing structure is fully built.\
            \ If this field is missing, index does not require any specific build\
            \ steps"
    EmbeddersCacheMemStat:
      type: object
      properties:
        cache_tag:
          type: string
          description: Tag of cache from configuration
        capacity:
          type: integer
          description: Capacity of cache
        cache:
          $ref: '#/components/schemas/CacheMemStats'
          description: Embedder cache stats
        storage_ok:
          type: boolean
          description: "Status of disk storage (true, if storage is enabled and writable)"
        storage_status:
          type: string
          description: "More detailed info about storage status. May contain 'OK',\
            \ 'DISABLED', 'FAILED' or last error description"
        storage_path:
          type: string
          description: Filesystem path to namespace storage
        storage_size:
          type: integer
          description: Disk space occupied by storage
    JoinCacheMemStats:
      description: Join cache stats. Stores results of selects to right table by ON
        condition
      allOf:
      - $ref: '#/components/schemas/CacheMemStats'
    QueryCacheMemStats:
      description: Query cache stats. Stores results of SELECT COUNT(*) by Where conditions
      allOf:
      - $ref: '#/components/schemas/CacheMemStats'
    IndexCacheMemStats:
      description: Idset cache stats. Stores merged reverse index results of SELECT
        field IN(...) by IN(...) keys
      allOf:
      - $ref: '#/components/schemas/CacheMemStats'
    CacheMemStats:
      type: object
      properties:
        total_size:
          type: integer
          description: Total memory consumption by this cache
        items_count:
          type: integer
          description: Count of used elements stored in this cache
        empty_count:
          type: integer
          description: Count of empty elements slots in this cache
        hit_count_limit:
          type: integer
          description: "Number of hits of queries, to store results in cache"
    ReplicationStats:
      type: object
      properties:
        last_lsn:
          type: integer
          description: Last Log Sequence Number (LSN) of applied namespace modification
        cluster_id:
          type: integer
          description: Cluster ID - must be same for client and for master
        slave_mode:
          type: boolean
          description: "If true, then namespace is in slave mode"
        error_code:
          type: integer
          description: Error code of last replication
        error_message:
          type: string
          description: Error message of last replication
        status:
          type: string
          description: Current replication status for this namespace
          enum:
          - idle
          - error
          - fatal
          - syncing
          - none
        master_state:
          type: object
          properties:
            data_hash:
              type: integer
              description: Hashsum of all records in namespace
            last_lsn:
              type: integer
              description: Last Log Sequence Number (LSN) of applied namespace modification
            updated_unix_nano:
              type: integer
              description: Last update time
            data_count:
              type: integer
              description: Items count in master namespace
          description: State of current master namespace
        incarnation_counter:
          type: integer
          description: Number of storage's master <-> slave switches
        data_hash:
          type: integer
          description: Hashsum of all records in namespace
        wal_count:
          type: integer
          description: Write Ahead Log (WAL) records count
        wal_size:
          type: integer
          description: Total memory consumption of Write Ahead Log (WAL)
        updated_unix_nano:
          type: integer
          description: Last update time
        data_count:
          type: integer
          description: Items count in namespace
      description: State of namespace replication
    DatabasePerfStats:
      type: object
      properties:
        total_items:
          type: integer
          description: "Total count of documents, matched specified filters"
        items:
          type: array
          description: "Documents, matched specified filters"
          items:
            $ref: '#/components/schemas/NamespacePerfStats'
    NamespacePerfStats:
      type: object
      properties:
        name:
          type: string
          description: Name of namespace
        updates:
          $ref: '#/components/schemas/UpdatePerfStats'
        selects:
          $ref: '#/components/schemas/SelectPerfStats'
        transactions:
          $ref: '#/components/schemas/TransactionsPerfStats'
        join_cache:
          $ref: '#/components/schemas/LRUCachePerfStats'
        query_count_cache:
          $ref: '#/components/schemas/LRUCachePerfStats'
        indexes:
          type: array
          description: Performance statistics for each namespace index
          items:
            type: object
            properties:
              name:
                type: string
                description: Name of index
              updates:
                $ref: '#/components/schemas/UpdatePerfStats'
              selects:
                $ref: '#/components/schemas/SelectPerfStats'
              cache:
                $ref: '#/components/schemas/LRUCachePerfStats'
              upsert_embedder_cache:
                description: Cache of upsert embedder for index
                $ref: '#/components/schemas/EmbedderCachePerfStat'
              query_embedder_cache:
                description: Cache of query embedder for index
                $ref: '#/components/schemas/EmbedderCachePerfStat'
    CommonPerfStats:
      type: object
      properties:
        total_queries_count:
          type: integer
          description: Total count of queries to this object
        total_avg_latency_us:
          type: integer
          description: Average latency (execution time) for queries to this object
        total_avg_lock_time_us:
          type: integer
          description: Average waiting time for acquiring lock to this object
        last_sec_qps:
          type: integer
          description: "Count of queries to this object, requested at last second"
        last_sec_avg_latency_us:
          type: integer
          description: Average latency (execution time) for queries to this object
            at last second
        last_sec_avg_lock_time_us:
          type: integer
          description: Average waiting time for acquiring lock to this object at last
            second
        latency_stddev:
          type: number
          description: Standard deviation of latency values
        min_latency_us:
          type: integer
          description: Minimal latency value
        max_latency_us:
          type: integer
          description: Maximum latency value
    UpdatePerfStats:
      description: Performance statistics for update operations
      allOf:
      - $ref: '#/components/schemas/CommonPerfStats'
    SelectPerfStats:
      description: Performance statistics for select operations
      allOf:
      - $ref: '#/components/schemas/CommonPerfStats'
    TransactionsPerfStats:
      type: object
      properties:
        total_count:
          type: integer
          description: Total transactions count for this namespace
        total_copy_count:
          type: integer
          description: Total namespace copy operations
        avg_steps_count:
          type: integer
          description: Average steps count in transactions for this namespace
        min_steps_count:
          type: integer
          description: Minimum steps count in transactions for this namespace
        max_steps_count:
          type: integer
          description: Maximum steps count in transactions for this namespace
        avg_prepare_time_us:
          type: integer
          description: Average transaction preparation time usec
        min_prepare_time_us:
          type: integer
          description: Minimum transaction preparation time usec
        max_prepare_time_us:
          type: integer
          description: Maximum transaction preparation time usec
        avg_commit_time_us:
          type: integer
          description: Average transaction commit time usec
        min_commit_time_us:
          type: integer
          description: Minimum transaction commit time usec
        max_commit_time_us:
          type: integer
          description: Maximum transaction commit time usec
        avg_copy_time_us:
          type: integer
          description: Average namespace copy time usec
        min_copy_time_us:
          type: integer
          description: Maximum namespace copy time usec
        max_copy_time_us:
          type: integer
          description: Minimum namespace copy time usec
      description: Performance statistics for transactions
    QueriesPerfStats:
      type: object
      properties:
        total_items:
          type: integer
          description: "Total count of documents, matched specified filters"
        items:
          type: array
          description: "Documents, matched specified filters"
          items:
            $ref: '#/components/schemas/QueryPerfStats'
    QueryPerfStats:
      description: Performance statistics per each query
      allOf:
      - $ref: '#/components/schemas/CommonPerfStats'
      - type: object
        properties:
          query:
            type: string
            description: normalized SQL representation of query
          longest_query:
            type: string
            description: not normalized SQL representation of longest query
    LRUCachePerfStats:
      type: object
      properties:
        total_queries:
          minimum: 0
          type: integer
          description: Queries total count
        cache_hit_rate:
          maximum: 1
          minimum: 0
          type: number
          description: Cache hit rate (hits / total_queries)
        is_active:
          type: boolean
          description: Determines if cache is currently in use. Usually it has 'false'
            value for uncommitted indexes
      description: Performance statistics for specific LRU-cache instance
    EmbedderCachePerfStat:
      type: object
      properties:
        cache_tag:
          type: string
          description: Name. Identifier for linking settings
        total_queries:
          minimum: 0
          type: integer
          description: Queries total count
        cache_hit_rate:
          maximum: 1
          minimum: 0
          type: number
          description: Cache hit rate (hits / total_queries)
        is_active:
          type: boolean
          description: Determines if cache is currently in use. Usually it has 'false'
            value for uncommitted indexes
      description: Performance statistics for specific Embedder LRU-cache instance
    SystemConfigItems:
      type: object
      properties:
        items:
          type: array
          description: "Documents, matched specified filters"
          items:
            $ref: '#/components/schemas/SystemConfigItem'
    SystemConfigItem:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          default: profiling
          enum:
          - profiling
          - namespaces
          - replication
          - async_replication
          - embedders
          - action
        profiling:
          $ref: '#/components/schemas/ProfilingConfig'
        namespaces:
          type: array
          items:
            $ref: '#/components/schemas/NamespacesConfig'
        replication:
          $ref: '#/components/schemas/ReplicationConfig'
        async_replication:
          $ref: '#/components/schemas/AsyncReplicationConfig'
        embedders:
          type: array
          items:
            $ref: '#/components/schemas/EmbeddersConfig'
        action:
          $ref: '#/components/schemas/ActionCommand'
      discriminator:
        propertyName: type
    ProfilingConfig:
      type: object
      properties:
        activitystats:
          type: boolean
          description: Enables tracking activity statistics
          default: false
        memstats:
          type: boolean
          description: Enables tracking memory statistics
          default: true
        perfstats:
          type: boolean
          description: Enables tracking overall performance statistics
          default: false
        queriesperfstats:
          type: boolean
          description: Enables record queries performance statistics
          default: false
        queries_threshold_us:
          type: integer
          description: "Minimum query execution time to be recorded in #queriesperfstats\
            \ namespace"
        long_queries_logging:
          $ref: '#/components/schemas/LongQueriesLogging'
    LongQueriesLogging:
      type: object
      properties:
        select:
          $ref: '#/components/schemas/SelectLogging'
        update_delete:
          $ref: '#/components/schemas/UpdateDeleteLogging'
        transaction:
          $ref: '#/components/schemas/TransactionLogging'
      description: Parameters for logging long queries and transactions
    SelectLogging:
      type: object
      properties:
        threshold_us:
          type: integer
          description: "Threshold value for logging SELECT queries, if -1 logging\
            \ is disabled"
        normalized:
          type: boolean
          description: Output the query in a normalized form
          default: false
    UpdateDeleteLogging:
      type: object
      properties:
        threshold_us:
          type: integer
          description: "Threshold value for logging UPDATE and DELETE queries, if\
            \ -1 logging is disabled"
        normalized:
          type: boolean
          description: Output the query in a normalized form
          default: false
    TransactionLogging:
      type: object
      properties:
        threshold_us:
          type: integer
          description: "Threshold value for total transaction commit time, if -1 logging\
            \ is disabled"
        avg_step_threshold_us:
          type: integer
          description: "Threshold value for the average step duration time in a transaction,\
            \ if -1 logging is disabled"
    NamespacesConfig:
      type: object
      properties:
        namespace:
          type: string
          description: "Name of namespace, or `*` for setting to all namespaces"
        log_level:
          type: string
          description: Log level of queries core logger
          enum:
          - none
          - error
          - warning
          - info
          - trace
        join_cache_mode:
          type: string
          default: "off"
          description: Join cache mode
          enum:
          - aggressive
          - "on"
          - "off"
        start_copy_policy_tx_size:
          type: integer
          default: 10000
          description: Enable namespace copying for transaction with steps count greater
            than this value (if copy_politics_multiplier also allows this)
        copy_policy_multiplier:
          type: integer
          default: 5
          description: Disables copy policy if namespace size is greater than copy_policy_multiplier
            * start_copy_policy_tx_size
        tx_size_to_always_copy:
          type: integer
          default: 100000
          description: Force namespace copying for transaction with steps count greater
            than this value
        tx_vec_insertion_threads:
          type: integer
          default: 4
          description: "Count of threads, that will be created during transaction's\
            \ commit to insert data into multithread ANN-indexes"
        optimization_timeout_ms:
          type: integer
          default: 800
          description: Timeout before background indexes optimization start after
            last update. 0 - disable optimizations
        optimization_sort_workers:
          type: integer
          default: 4
          description: Maximum number of background threads of sort indexes optimization.
            0 - disable sort optimizations
        wal_size:
          type: integer
          default: 4000000
          description: Maximum WAL size for this namespace (maximum count of WAL records)
        max_preselect_size:
          minimum: 0
          default: 1000
          type: integer
          description: "Maximum preselect size for optimization of inner join by injection\
            \ of filters. If max_preselect_size is 0, then only max_preselect_part\
            \ will be used. If max_preselect_size is 0 and max_preselect_part is 0,\
            \ optimization with preselect will not be applied. If max_preselect_size\
            \ is 0 and max_preselect_part is 1.0, then the optimization will always\
            \ be applied"
        max_preselect_part:
          maximum: 1
          minimum: 0
          default: 0.1
          type: number
          description: "Maximum preselect part of namespace's items for optimization\
            \ of inner join by injection of filters. If max_preselect_part is 0, then\
            \ only max_preselect_size will be used. If max_preselect_size is 0 and\
            \ max_preselect_part is 0, optimization with preselect will not be applied.\
            \ If max_preselect_size is 0 and max_preselect_part is 1.0, then the optimization\
            \ will always be applied"
          format: float
        min_preselect_size:
          minimum: 0
          default: 1000
          type: integer
          description: Minimum preselect size for optimization of inner join by injection
            of filters. Min_preselect_size will be used as preselect limit if (max_preselect_part
            * ns.size) is less than this value
        max_iterations_idset_preresult:
          maximum: 2147483647
          minimum: 201
          default: 20000
          type: integer
          description: Maximum number of IdSet iterations of namespace preliminary
            result size for optimization
        index_updates_counting_mode:
          type: boolean
          default: false
          description: "Enables 'simple counting mode' for index updates tracker.\
            \ This will increase index optimization time, however may reduce insertion\
            \ time"
        sync_storage_flush_limit:
          minimum: 0
          default: 20000
          type: integer
          description: "Enables synchronous storage flush inside write-calls, if async\
            \ updates count is more than sync_storage_flush_limit. 0 - disables synchronous\
            \ storage flush, in this case storage will be flushed in background thread\
            \ only"
        ann_storage_cache_build_timeout_ms:
          minimum: 0
          default: 5000
          type: integer
          description: Delay between last and namespace update background ANN-indexes
            storage cache creation. Storage cache is required for ANN-indexes for
            faster startup. 0 - disables background cache creation (cache will still
            be created on the database shutdown)
        strict_mode:
          type: string
          default: names
          description: Strict mode for queries. Adds additional check for fields('names')/indexes('indexes')
            existence in sorting and filtering conditions
          enum:
          - none
          - names
          - indexes
        cache:
          type: object
          properties:
            index_idset_cache_size:
              minimum: 0
              default: 134217728
              type: integer
              description: Max size of the index IdSets cache in bytes (per index).
                Each index has it's own independent cache. This cache is used in any
                selections to store resulting sets of internal document IDs (it does
                not stores documents' content itself)
            index_idset_hits_to_cache:
              minimum: 0
              default: 2
              type: integer
              description: "Default 'hits to cache' for index IdSets caches. This\
                \ value determines how many requests required to put results into\
                \ cache. For example with value of 2: first request will be executed\
                \ without caching, second request will generate cache entry and put\
                \ results into the cache and third request will get cached results.\
                \ This value may be automatically increased if cache is invalidation\
                \ too fast"
            ft_index_cache_size:
              minimum: 0
              default: 134217728
              type: integer
              description: "Max size of the fulltext indexes IdSets cache in bytes\
                \ (per index). Each fulltext index has it's own independent cache.\
                \ This cache is used in any selections to store resulting sets of\
                \ internal document IDs, FT ranks and highlighted areas (it does not\
                \ stores documents' content itself)"
            ft_index_hits_to_cache:
              minimum: 0
              default: 2
              type: integer
              description: "Default 'hits to cache' for fulltext index IdSets caches.\
                \ This value determines how many requests required to put results\
                \ into cache. For example with value of 2: first request will be executed\
                \ without caching, second request will generate cache entry and put\
                \ results into the cache and third request will get cached results.\
                \ This value may be automatically increased if cache is invalidation\
                \ too fast"
            joins_preselect_cache_size:
              minimum: 0
              default: 134217728
              type: integer
              description: "Max size of the index IdSets cache in bytes for each namespace.\
                \ This cache will be enabled only if 'join_cache_mode' property is\
                \ not 'off'. It stores resulting IDs, serialized JOINed queries and\
                \ any other 'preselect' information for the JOIN queries (when target\
                \ namespace is right namespace of the JOIN)"
            joins_preselect_hit_to_cache:
              minimum: 0
              default: 2
              type: integer
              description: "Default 'hits to cache' for joins preselect cache of the\
                \ current namespace. This value determines how many requests required\
                \ to put results into cache. For example with value of 2: first request\
                \ will be executed without caching, second request will generate cache\
                \ entry and put results into the cache and third request will get\
                \ cached results. This value may be automatically increased if cache\
                \ is invalidation too fast"
            query_count_cache_size:
              minimum: 0
              default: 134217728
              type: integer
              description: Max size of the cache for COUNT_CACHED() aggregation in
                bytes for each namespace. This cache stores resulting COUNTs and serialized
                queries for the COUNT_CACHED() aggregations
            query_count_hit_to_cache:
              minimum: 0
              default: 2
              type: integer
              description: "Default 'hits to cache' for COUNT_CACHED() aggregation\
                \ of the current namespace. This value determines how many requests\
                \ required to put results into cache. For example with value of 2:\
                \ first request will be executed without caching, second request will\
                \ generate cache entry and put results into the cache and third request\
                \ will get cached results. This value may be automatically increased\
                \ if cache is invalidation too fast"
    ReplicationConfig:
      type: object
      properties:
        server_id:
          maximum: 999
          minimum: 0
          default: 0
          type: integer
          description: "Node identifier. Should be unique for each node in the replicated\
            \ cluster (non-unique IDs are also allowed, but may lead to the inconsistency\
            \ in some cases"
        cluster_id:
          type: integer
          default: 2
          description: Cluster ID - must be same for client and for master
        admissible_replication_tokens:
          description: Lists of namespaces with their admissible tokens
          type: array
          items:
            type: object
            properties:
              token:
                type: string
              namespaces:
                type: array
                description: Namespaces which can only be replicated by a leader with the same token
                items:
                  type: object
    AsyncReplicationConfig:
      required:
      - namespaces
      - nodes
      - role
      type: object
      properties:
        role:
          type: string
          description: Replication role
          enum:
          - none
          - follower
          - leader
        mode:
          type: string
          description: "Allows to configure async replication from sync raft-cluster\
            \ (replicate either from each node, or from synchronous cluster leader)"
          enum:
          - default
          - from_sync_leader
        app_name:
          type: string
          description: "Application name, used by replicator as a login tag"
        online_updates_timeout_sec:
          type: integer
          description: Node response timeout for online-replication (seconds)
        sync_timeout_sec:
          type: integer
          description: "Network timeout for communication with followers (for force\
            \ and wal synchronization), in seconds"
        retry_sync_interval_msec:
          type: integer
          description: Resync timeout on network errors
        sync_threads:
          type: integer
          description: Number of data replication threads
        syncs_per_thread:
          type: integer
          description: Max number of concurrent force/wal sync's per thread
        batching_routines_count:
          type: integer
          description: "Number of coroutines for updates batching (per namespace).\
            \ Higher value here may help to reduce networks triparound await time,\
            \ but will require more RAM"
        online_updates_delay_msec:
          type: integer
          description: "Delay between write operation and replication. Larger values\
            \ here will leader to higher replication latency and buffering, but\
            \ also will provide more effective network batching and CPU utilization"
        enable_compression:
          type: boolean
          description: Enable network traffic compression
        max_wal_depth_on_force_sync:
          type: integer
          description: "Maximum number of WAL records, which will be copied after\
            \ force-sync"
        force_sync_on_logic_error:
          type: boolean
          description: force resync on logic error conditions
        force_sync_on_wrong_data_hash:
          type: boolean
          description: force resync on wrong data hash conditions
        log_level:
          type: string
          description: Replication log level on replicator's startup
          enum:
          - none
          - error
          - warning
          - info
          - trace
        namespaces:
          type: array
          description: General list of namespaces for replication. Empty means all
            of the namespaces. All replicated namespaces will become read only for
            followers
          items:
            type: string
        self_replication_token:
          type: string
          description: Token of the current node that it sends to the follower for verification
        nodes:
          type: array
          description: Followers list
          items:
            required:
            - dsn
            type: object
            properties:
              dsn:
                type: string
                description: Follower's DSN. Must have cproto-scheme
              namespaces:
                type: array
                description: "List of namespaces to replicate on this specific node.\
                  \ Empty means all of the namespaces. If field doesn't exists, then\
                  \ general list will be used"
                items:
                  type: string
    EmbeddersConfig:
      type: object
      properties:
        cache_tag:
          type: string
          description: "Name. Identifier for linking settings. Special value '*' is supported (applies to all)"
        max_cache_items:
          minimum: 0
          default: 1000000
          type: integer
          description: "Maximum size of the embedding results cache in items.\
                \ This cache will only be enabled if the 'max_cache_items' property is not 'off' (value 0).\
                \ It stores the results of the embedding calculation"
        hit_to_cache:
          type: integer
          minimum: 0
          default: 1
          description: "Default 'hits to cache' for embedding calculation cache.\
                \ This value determines how many requests required to put results into cache.\
                \ For example with value of 2: first request will be executed without caching,\
                \ second request will generate cache entry and put results into the cache\
                \ and third request will get cached results. 0 and 1 mean - when value added goes straight to the cache"
    ActionCommand:
      required:
      - command
      type: object
      properties:
        command:
          type: string
          description: Command to execute
          enum:
          - restart_replication
          - reset_replication_role
        namespace:
          type: string
          description: Namespace name for reset_replication_role. May be empty
    BeginTransactionResponse:
      type: object
      properties:
        tx_id:
          type: string
          description: Unique transaction id
    UserRoleResponse:
      type: object
      properties:
        user_role:
          type: string
          description: User role
          enum:
          - owner
          - db_admin
          - data_write
          - data_read
          - none
          - unauthoried
  responses:
    OK:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusResponse'
    BadRequest:
      description: Invalid arguments supplied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusResponse'
    RequestTimeout:
      description: Context timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusResponse'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusResponse'
    NotFound:
      description: Entry not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusResponse'
    UnexpectedError:
      description: Unexpected internal error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusResponse'
