swagger: "2.0"
info:
  description: |
    **Reindexer** is an embeddable, in-memory, document-oriented database with a high-level Query builder interface.
    Reindexer's goal is to provide fast search with complex queries.
    The Reindexer is compact and fast. It has not heavy dependencies. Complete reindexer docker image with all libraries and web interface size is just 15MB.
    Reindexer is fast.
  version: "3.12.0"
  title: "Reindexer REST API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api/v1"
tags:
- name: "databases"
  description: "Databases management"
- name: "namespaces"
  description: "Namespaces management"
- name: "items"
  description: "Documents management"
- name: "indexes"
  description: "Indexes management"
- name: "queries"
  description: "Queries to reindexer (dsl/sql)"
- name: "system"
  description: "System methods"
schemes:
- "http"
produces:
- "application/json"

paths:
  /db:
    post:
      tags:
      - "databases"
      summary: "Create new database"
      description: |
        This operation will create new database. If database is already exists, then error will be returned.
      operationId: "createDatabase"
      parameters:
      - in: body
        name: "body"
        description: "Database definintion"
        required: true
        schema:
          $ref: "#/definitions/Database"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

    get:
      tags:
      - "databases"
      summary: "List available databases"
      description: |
        This operation will output list of all available databases
      operationId: "describeDatabases"
      parameters:
      - name: "sort_order"
        in: query
        type: string
        description: "Sort Order"
        enum:
        - "asc"
        - "desc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Databases"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}:
    delete:
      tags:
      - "databases"
      summary: "Drop database"
      description: |
        This operation will remove complete database from memory and disk. 
        All data, including namespaces, their documents and indexes will be erased. 
        Can not be undone. USE WITH CAUTION.
      operationId: "dropDatabase"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces:
    post:
      tags:
      - "namespaces"
      summary: "Create namespace"
      description: |
        This operation will create new namespace in specified database.
        If namespace is already exists, then operation do not nothing.
      operationId: "openNamespace"
      parameters:
      - in: body
        name: "body"
        description: "Namespace definintion"
        required: true
        schema:
          $ref: "#/definitions/Namespace"
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    get:
      tags:
      - "namespaces"
      summary: "List available namespaces"
      description: |
        This operation will list all availavle namespaces in specified database.
        If database is not exists, then error will be returned.
      operationId: "describeNamespaces"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "sort_order"
        in: query
        type: string
        description: "Sort Order"
        enum:
        - "asc"
        - "desc"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Namespaces"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/{name}:
    get:
      tags:
      - "namespaces"
      summary: "Get namespace description"
      description: |
        This operation will return specified namespace description, including options of namespace, and available indexes
      operationId: "describeCurrNamespace"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Namespace"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    delete:
      tags:
      - "namespaces"
      summary: "Drop namespace"
      description: |
        This operation will delete completely namespace from memory and disk.
        All documents, indexes and metadata from namespace will be removed.
        Can not be undone. USE WITH CAUTION.
      operationId: "dropNamespace"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/{name}/truncate:
    delete:
      tags:
      - "namespaces"
      summary: "Truncate namespace"
      description: |
        This operation will delete all items from namespace.
      operationId: "truncateNamespace"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/{name}/rename/{newname}:
    get:
      tags:
      - "namespaces"
      summary: "Rename namespace"
      description: |
        This operation will rename namespace.
      operationId: "renameNamespace"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      - name: "newname"
        in: path
        type: string
        description: "Namespace new name"
        required: true

      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"


  /db/{database}/namespaces/{name}/metalist:
    get:
      tags:
      - "namespaces"
      summary: "Get list of namespace's meta info"
      description: |
        This operation will return list of keys of all meta of specified namespace
      operationId: "getNamespaceMetalist"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      - name: "sort_order"
        in: query
        required: false
        description: "Sort Order"
        type: string
        enum:
        - "asc"
        - "desc"
      - name: "with_values"
        in: query
        required: false
        description: "Includ values in response"
        type: boolean
        default: false
      - name: "offset"
        in: query
        required: false
        type: integer
        default: 0
      - name: "limit"
        in: query
        required: false
        type: integer
        description: "If 0 - no limit"
        default: 0
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/MetaListResponse"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/{name}/metabykey/{key}:
    get:
      tags:
      - "namespaces"
      summary: "Get namespace's meta info by key"
      description: |
        This operation will return value of namespace's meta with specified key
      operationId: "getNamespaceMetaByKey"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      - name: "key"
        in: path
        required: true
        description: "Meta key"
        type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/MetaByKeyResponse"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/{name}/metabykey:
    put:
      tags:
      - "namespaces"
      summary: "Put namespace's meta info with specified key and value"
      description: |
        This operation will set namespace's meta with specified key and value
      operationId: "putNamespaceMetaByKey"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      - name: "meta_info"
        in: body
        required: true
        description: "Meta info"
        schema:
          $ref: "#/definitions/MetaInfo"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UpdateResponse"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/{name}/items:
    delete:
      tags:
      - "items"
      summary: "Delete documents from namespace"
      operationId: "deleteItems"
      description: |
        This operation will DELETE documents from namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100}
        {"id":101}
        ...
        ```
      parameters:
      - in: body
        name: "body"
        schema:
          type: object
        required: true
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      - name: "precepts"
        in: query
        type: array
        collectionFormat: "multi"
        description: "Precepts to be done"
        required: false
        items:
          type: string
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ItemsUpdateResponse"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    post:
      tags:
      - "items"
      summary: "Insert documents to namespace"
      operationId: "postItems"
      description: |
        This operation will INSERT documents to namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      parameters:
      - in: body
        name: "body"
        schema:
          type: object
        required: true
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      - name: "precepts"
        in: query
        type: array
        collectionFormat: "multi"
        description: "Precepts to be done"
        required: false
        items:
          type: string
      - name: "format"
        in: query
        type: string
        description: "encoding data format"
        required: false
        enum:
          - json
          - msgpack
          - protobuf
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ItemsUpdateResponse"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    put:
      tags:
      - "items"
      summary: "Update documents in namespace"
      operationId: "putItems"
      description: |
        This operation will UPDATE documents in namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      parameters:
      - in: body
        name: "body"
        schema:
          type: object
        required: true
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      - name: "precepts"
        in: query
        type: array
        collectionFormat: "multi"
        description: "Precepts to be done"
        required: false
        items:
          type: string
      - name: "format"
        in: query
        type: string
        description: "encoding data format"
        required: false
        enum:
          - json
          - msgpack
          - protobuf
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ItemsUpdateResponse"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

    patch:
      tags:
      - "items"
      summary: "Upsert documents in namespace"
      operationId: "patchItems"
      description: |
        This operation will UPSERT documents in namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      parameters:
      - in: body
        name: "body"
        schema:
          type: object
        required: true
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      - name: "precepts"
        in: query
        type: array
        collectionFormat: "multi"
        description: "Precepts to be done"
        required: false
        items:
          type: string
      - name: "format"
        in: query
        type: string
        description: "encoding data format"
        required: false
        enum:
          - json
          - msgpack
          - protobuf
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ItemsUpdateResponse"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    get:
      tags:
      - "items"
      summary: "Get documents from namespace"
      operationId: "getItems"
      description: |
        This operation will select documents from namespace with specified filters, and sort them by specified sort order. Paging with limit and offset are supported.
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      - name: "limit"
        in: query
        type: integer
        description: "Maximum count of returned items"
      - name: "offset"
        in: query
        type: integer
        description: "Offset of first returned item"
      - name: "sort_field"
        in: query
        type: string
        description: "Sort Field"
      - name: "sort_order"
        in: query
        type: string
        description: "Sort Order"
        enum:
        - "asc"
        - "desc"
      - name: "filter"
        in: query
        type: string
        description: "Filter with SQL syntax, e.g: field1 = 'v1' AND field2 > 'v2'"
      - name: "fields"
        in: query
        type: string
        description: "Comma-separated list of returned fields"
      - name: "format"
        in: query
        type: string
        description: "encoding data format"
        required: false
        enum:
          - json
          - msgpack
          - protobuf
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/Items'
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/{name}/indexes:
    get:
      tags:
      - "indexes"
      summary: "List available indexes"
      description: |
        This operation will return list of available indexes, from specified database and namespace.
      operationId: "describeIndexes"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Indexes"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    post:
      tags:
      - "indexes"
      summary: "Add new index to namespace"
      operationId: "postIndex"
      description: |
        This operation will create new index. If index is already exists with the different parameters, then error will be returned.
        Operation is synchronious, so it can take long time, if namespace contains bunch of documents.
      parameters:
      - in: body
        name: "body"
        description: "Index definition"
        schema:
          $ref: "#/definitions/Index"
        required: true
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    put:
      tags:
      - "indexes"
      summary: "Update index in namespace"
      operationId: "putIndex"
      description: |
        This operation will update index parameters. E.g. type of field or type of index.
        Operation  is synchronious, so it can take long time, if namespace contains bunch of documents
      parameters:
      - in: body
        name: "body"
        description: "Index definition"
        schema:
          $ref: "#/definitions/Index"
        required: true
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/{name}/indexes/{indexname}:
    delete:
      tags:
      - "indexes"
      summary: "Drop index from namespace"
      operationId: "deleteIndex"
      description: |
        This operation will remove index from namespace. No data will be erased.
        Operation  is synchronious, so it can take long time, if namespace contains bunch of documents.
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      - name: "indexname"
        in: path
        type: string
        description: "Index name"
        required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/{name}/schema:
    put:
      tags:
      - "schema"
      summary: "Set namespace schema"
      operationId: "putSchema"
      description: |
        This operation will set namespace schema (information about available fields and field types)
      parameters:
      - in: body
        name: "body"
        description: This operation will put new schema for specified database and namespace
        schema:
          $ref: "#/definitions/SchemaDef"
        required: true
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    get:
      tags:
      - "schema"
      summary: "Get namespace schema"
      description: This operation will return current schema from specified database and namespace
      operationId: "getSchema"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "name"
        in: path
        type: string
        description: "Namespace name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SchemaDef"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/protobuf_schema:
    get:
      produces:
      - "text/plain"
      tags:
      - "schema"
      summary: "Get protobuf communication parameters schema"
      operationId: "getNsParamsSchema"
      description: |
        This operation allows to get client/server communication parameters as google protobuf schema (content of .proto file) 
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "ns"
        in: "query"
        type: "array"
        collectionFormat: "multi"
        description: "Namespace name"
        items:
          type: "string"
        required: true
      responses:
        200:
          description: "successful operation"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/query:
    get:
      tags:
      - "queries"
      summary: "Query documents from namespace"
      operationId: "getQuery"
      description: |
        This operation queries documents from namespace by SQL query. Query can be preced by `EXPLAIN` statement, then query execution plan will be returned with query results. 
        Two level paging is supported. At first, applied normal SQL `LIMIT` and `OFFSET`,
        then `limit` and `offset` from http request.
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "q"
        in: query
        type: string
        description: "SQL query"
        required: true
      - name: "limit"
        in: query
        type: integer
        description: "Maximum count of returned items"
      - name: "offset"
        in: query
        type: integer
        description: "Offset of first returned item"
      - name: with_columns
        in: query
        type: boolean
        description: "Return columns names and widths for table format output"
        required: false
      - name: width
        in: query
        type: integer
        description: "Total width in rows of view for table format output"
        required: false
      - name: "format"
        in: query
        type: string
        description: "encoding data format"
        required: false
        enum:
          - json
          - msgpack
          - protobuf
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/QueryItems'
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    post:
      tags:
      - "queries"
      summary: "Query documents from namespace"
      operationId: "postQuery"
      description: |
        This operation queries documents from namespace by DSL query.
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - in: body
        name: "body"
        description: "DSL query"
        required: true
        schema:
          $ref: "#/definitions/Query"
      - name: with_columns
        in: query
        type: boolean
        description: "Return columns names and widths for table format output"
        required: false
      - name: width
        in: query
        type: integer
        description: "Total width in rows of view for table format output"
        required: false
      - name: "format"
        in: query
        type: string
        description: "encoding data format"
        required: false
        enum:
          - json
          - msgpack
          - protobuf
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/QueryItems'
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    put:
      tags:
      - "queries"
      summary: "Update documents in namespace"
      operationId: "updateQuery"
      description: |
        This operation updates documents in namespace by DSL query.
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - in: body
        name: "body"
        description: "DSL query"
        required: true
        schema:
          $ref: "#/definitions/Query"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    delete:
      tags:
      - "queries"
      summary: "Delete documents from namespace"
      operationId: "deleteQuery"
      description: |
        This operation removes documents from namespace by DSL query.
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - in: body
        name: "body"
        description: "DSL query"
        required: true
        schema:
          $ref: "#/definitions/Query"
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/{name}/transactions/begin:
    post:
      tags:
      - "transactions"
      summary: "Begin transaction to namespace"
      operationId: "beginTx"
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "name"
        in: "path"
        type: "string"
        description: "Namespace name"
        required: true
      - name: "format"
        in: "query"
        type: "string"
        description: "encoding data format"
        required: false
        enum:
          - json
          - msgpack
          - protobuf
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BeginTransactionResponse"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/transactions/{tx_id}/commit:
    post:
      tags:
      - "transactions"
      summary: "Commit transaction"
      operationId: "commitTx"
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "tx_id"
        in: "path"
        type: "string"
        description: "transaction id"
        required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/transactions/{tx_id}/rollback:
    post:
      tags:
      - "transactions"
      summary: "Rollback transaction"
      operationId: "rollbackTx"
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "tx_id"
        in: "path"
        type: "string"
        description: "transaction id"
        required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/transactions/{tx_id}/items:
    delete:
      tags:
      - "transactions"
      summary: "Delete documents from namespace via transaction"
      operationId: "deleteItemsTx"
      description: |
        This will add DELETE operation into transaction.
        It DELETEs documents from namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100}
        {"id":101}
        ...
        ```
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: "object"
        required: true
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "precepts"
        in: "query"
        type: "array"
        collectionFormat: "multi"
        description: "Precepts to be done"
        required: false
        items:
          type: "string"
      - name: "tx_id"
        in: "path"
        type: "string"
        description: "transaction id"
        required: true
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    post:
      tags:
      - "transactions"
      summary: "Insert documents to namespace via transaction"
      operationId: "postItemsTx"
      description: |
        This will add INSERT operation into transaction.
        It INSERTs documents to namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: "object"
        required: true
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "tx_id"
        in: "path"
        type: "string"
        description: "transaction id"
        required: true
      - name: "precepts"
        in: "query"
        type: "array"
        collectionFormat: "multi"
        description: "Precepts to be done"
        required: false
        items:
          type: "string"
      - name: "format"
        in: "query"
        type: "string"
        description: "encoding data format"
        required: false
        enum:
          - json
          - msgpack
          - protobuf
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    put:
      tags:
      - "transactions"
      summary: "Update documents in namespace via transaction"
      operationId: "putItemsTx"
      description: |
        This will add UPDATE operation into transaction.
        It UPDATEs documents in namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: "object"
        required: true
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "tx_id"
        in: "path"
        type: "string"
        description: "transaction id"
        required: true
      - name: "precepts"
        in: "query"
        type: "array"
        collectionFormat: "multi"
        description: "Precepts to be done"
        required: false
        items:
          type: "string"
      - name: "format"
        in: "query"
        type: "string"
        description: "encoding data format"
        required: false
        enum:
          - json
          - msgpack
          - protobuf
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    patch:
      tags:
      - "transactions"
      summary: "Upsert documents in namespace via transaction"
      operationId: "patchItemsTx"
      description: |
        This will add UPSERT operation into transaction.
        It UPDATEs documents in namespace, by their primary keys.
        Each document should be in request body as separate JSON object, e.g.
        ```
        {"id":100, "name": "Pet"}
        {"id":101, "name": "Dog"}
        ...
        ```
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: "object"
        required: true
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "tx_id"
        in: "path"
        type: "string"
        description: "transaction id"
        required: true
      - name: "precepts"
        in: "query"
        type: "array"
        collectionFormat: "multi"
        description: "Precepts to be done"
        required: false
        items:
          type: "string"
      - name: "format"
        in: "query"
        type: "string"
        description: "encoding data format"
        required: false
        enum:
          - json
          - msgpack
          - protobuf
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/transactions/{tx_id}/query:
    get:
      tags:
      - "transactions"
      summary: "Delete/update queries for transactions"
      operationId: "getQueryTx"
      description: |
        This will add DELETE/UPDATE SQL query into transaction.
        This query UPDATEs/DELETEs documents from namespace
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "tx_id"
        in: "path"
        type: "string"
        description: "transaction id"
        required: true
      - name: "q"
        in: "query"
        type: "string"
        description: "SQL query"
        required: true
      - name: width
        in: "query"
        type: "integer"
        description: "Total width in rows of view for table format output"
        required: false
      - name: "format"
        in: "query"
        type: "string"
        description: "encoding data format"
        required: false
        enum:
          - json
          - msgpack
          - protobuf
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"
    delete:
      tags:
      - "transactions"
      summary: "Delete documents from namespace (transactions)"
      operationId: "deleteQueryTx"
      description: |
        This will add DELETE query into transaction.
        DELETE query removes documents from namespace by DSL query.
      parameters:
      - name: "database"
        in: "path"
        type: "string"
        description: "Database name"
        required: true
      - name: "tx_id"
        in: "path"
        type: "string"
        description: "transaction id"
        required: true
      - in: "body"
        name: "body"
        description: "DSL query"
        required: true
        schema:
          $ref: "#/definitions/Query"
      - name: "tx_id"
        in: "query"
        type: "string"
        description: "transaction id"
        required: false
      responses:
        200:
          $ref: "#/responses/OK"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/suggest:
    get:
      tags:
      - "queries"
      summary: "Suggest for autocompletion of SQL query"
      operationId: "getSuggest"
      description: |
        This operation pareses SQL query, and suggests autocompletion variants
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "q"
        in: query
        type: string
        description: "SQL query"
        required: true
      - name: "pos"
        in: query
        type: integer
        description: "Cursor position for suggest"
        required: true
      - name: "line"
        in: query
        type: integer
        description: "Cursor line for suggest"
        required: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/SuggestItems'
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/sqlquery:
    post:
      tags:
      - "queries"
      summary: "Query documents from namespace"
      operationId: "postSQLQuery"
      description: |
        This operation queries documents from namespace by SQL query. Query can be preced by `EXPLAIN` statement, then query execution plan will be returned with query results. 
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      - name: "q"
        in: body
        schema:
          type: string
        description: "SQL query"
        required: true
      - name: with_columns
        in: query
        type: boolean
        description: "Return columns names and widths for table format output"
        required: false
      - name: width
        in: query
        type: integer
        description: "Total width in rows of view for table format output"
        required: false
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/QueryItems'
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /check:
    get:
      tags:
      - "system"
      summary: "Get system information"
      description: "This operation will return system informatiom about server version, uptime, and resources consumtion "
      operationId: "getSysInfo"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/SysInfo"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /allocator/drop_cache:
    post:
      tags:
        - "system"
      summary: "Try to release free memory back to the operating system for reuse by other applications."
      operationId: "postAllocatorDropCache"
      description: "Try to release free memory back to the operating system for reuse. Only for tcmalloc allocator."

  /allocator/info:
    get:
      tags:
        - "system"
      summary: "Get memory usage information"
      description: "This operation will return memory usage informatiom from tcmalloc allocator."
      operationId: "getAllocatorInfo"
      responses:
        200:
          description: "successful operation"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"


  /db/{database}/namespaces/%23activitystats/items:
    get:
      tags:
      - "system"
      summary: "Get activity stats information"
      description: "This operation will return detailed informatiom about current activity of all connected to the database clients"
      operationId: "getActivityStats"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ActivityStats"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/%23clientsstats/items:
    get:
      tags:
      - "system"
      summary: "Get client connection information"
      description: "This operation will return detailed informatiom about all connections on the server"
      operationId: "getClientsStats"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ClientsStats"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/%23memstats/items:
    get:
      tags:
      - "system"
      summary: "Get memory stats information"
      description: "This operation will return detailed informatiom about database memory consumption"
      operationId: "getMemStats"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DatabaseMemStats"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/%23perfstats/items:
    get:
      tags:
      - "system"
      summary: "Get performance stats information"
      description: "This operation will return detailed informatiom about database performance timings. By default performance stats is turned off."
      operationId: "getPerfStats"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/DatabasePerfStats"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/%23queriesperfstats/items:
    get:
      tags:
      - "system"
      summary: "Get SELECT queries performance stats information"
      description: "This operation will return detailed informatiom about database memory consumption. By default qureis performance stat is turned off."
      operationId: "getQueriesPerfStats"
      parameters:
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/QueriesPerfStats"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

  /db/{database}/namespaces/%23config/items:
    put:
      tags:
      - "system"
      summary: "Update system config"
      operationId: "putSystemConfig"
      description: |
        This operation will update system configuration:
        - profiling configuration. It is used to enable recording of queries and overal performance;
        - log queries configurating.
      parameters:
      - in: body
        name: "body"
        schema:
          $ref: "#/definitions/SystemConfigItem"
        required: true
      - name: "database"
        in: path
        type: string
        description: "Database name"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UpdateResponse"
        400:
          $ref: "#/responses/BadRequest"
        403:
          $ref: "#/responses/Forbidden"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/UnexpectedError"

responses:
  OK:
    description: "Successful operation"
    schema:
      $ref: "#/definitions/StatusResponse"
  BadRequest:
    description: "Invalid arguments supplied"
    schema:
      $ref: "#/definitions/StatusResponse"
  Forbidden:
    description: "Forbidden"
    schema:
      $ref: "#/definitions/StatusResponse"
  NotFound:
    description: "Entry not found"
    schema:
      $ref: "#/definitions/StatusResponse"
  UnexpectedError:
    description: "Unexpected internal error"
    schema:
      $ref: "#/definitions/StatusResponse"

definitions:
  SysInfo:
    type: object
    properties:
      version:
        type: string
        description: "Server version"
      uptime:
        type: integer
        description: "Server uptime in seconds"
      start_time:
        type: integer
        description: "Server start time in unix timestamp"
      heap_size:
        type: integer
        description: "Current heap size in bytes"
      current_allocated_bytes:
        type: integer
        description: "Current inuse allocated memory size in bytes"
      pageheap_free:
        type: integer
        description: "Heap free size in bytes"
      pageheap_unmapped:
        type: integer
        description: "Unmapped free heap size in bytes"
      rpc_address:
        type: string
        description: "RPC server address"
      http_address:
        type: string
        description: "HTTP server address"
      storage_path:
        type: string
        description: "Path to storage"
      rpc_log:
        type: string
        description: "RPC server log path"
      http_log:
        type: string
        description: "HTTP server log path"
      core_log:
        type: string
        description: "Reindexer core log path"
      server_log:
        type: string
        description: "Reindexer server log path"
      log_level:
        type: string
        description: "Log level, should be one of these: trace, debug, info, warning, error, critical"

  ActivityStats:
    type: object
    properties:
      total_items:
        description: "Total count of documents, matched specified filters"
        type: integer
      items:
        type: array
        items:
          type: object
          required:
            - client
            - query
            - query_id
            - query_start
            - state
          properties:
            client:
              type: string
              description: "Client identifier"
            user:
              type: string
              description: "User name"
            query:
              type: string
              description: "Query text"
            query_id:
              type: integer
              description: "Query identifier"
            query_start:
              type: string
              description: "Query start time"
            state:
              type: string
              description: "Current operation state"
              enum:
              - "in_progress" 
              - "wait_lock"
              - "sending"
              - "indexes_lookup"
              - "bool"
              - "select_loop"
            lock_description:
              type: string

  ClientsStats:
    type: object
    properties:
      total_items:
        description: "Count of connected clients"
        type: integer
      items:
        type: array
        items:
          type: object
          required:
            - connection_id
            - ip
            - user_name
            - user_rights
            - db_name
            - current_activity
            - start_time
            - recv_bytes
            - sent_bytes
            - client_version
            - app_name
            - tx_count
            - is_subscribed
            - updates_filter
          properties:
            connection_id:
              type: integer
              description: "Connection identifier"
            ip:
              type: string
              description: "Ip"
            user_name:
              type: string
              description: "User name"
            user_rights:
              type: string
              description: "User right"
            db_name:
              type: string
              description: "Database name"
            current_activity:
              type: string
              description: "Current activity"
            start_time:
              type: integer
              description: "Server start time in unix timestamp"
            recv_bytes:
              type: integer
              description: "Receive byte"
            sent_bytes:
              type: integer
              description: "Send byte"
            client_version:
              type: string
              description: "Client version string"
            app_name:
              type: string
              description: "Client's aplication name"
            tx_count:
              type: integer
              description: "Count of currently opened transactions for this client"
            send_buf_bytes:
              type: integer
              description: "Send buffer size"
            pended_updates:
              type: integer
              description: "Pended updates count"
            last_send_ts:
              type: integer
              description: "Timestamp of last send operation (ms)"
            last_recv_ts:
              type: integer
              description: "Timestamp of last recv operation (ms)"
            send_rate:
              type: integer
              description: "Current send rate (bytes/s)"
            recv_rate:
              type: integer
              description: "Current recv rate (bytes/s)"
            is_subscribed:
              type: boolean
              description: "Status of updates subscription"
            updates_filter:
              type: object
              description: "Updates filter for this client"
              properties:
                namespaces:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: "Namespace name"
                      filters:
                        type: array
                        description: "Filtering conditions set"
                        items:
                          type: object
            updates_lost:
              type: integer
              description: "Updates lost call count"
  Databases:
    type: object
    properties:
      total_items:
         type: integer
         description: "Total count of databases"
      items:
         type: array
         items:
           description: "Name of database"
           type: string

  Database:
    type: object
    properties:
      name:
        type: string
        pattern: "^[A-Za-z0-9_\\-]*$"
        description: "Name of database"

  Namespaces:
    type: object
    properties:
      items:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: "Name of namespace"
      total_items:
        type: integer
        description: "Total count of namespaces"

  Namespace:
    type: object
    properties:
      name:
        type: string
        description: "Name of namespace"
        pattern: "^[A-Za-z0-9_\\-]*$"
      storage:
        type: object
        properties:
          enabled:
            type: boolean
            description: "If true, then documents will be stored to disc storage, else all data will be lost on server shutdown"
      indexes:
        type: array
        items: 
          $ref: "#/definitions/Index"

  Index:
    type: object
    required:
      - name
      - json_paths
      - field_type
      - index_type
    properties:
      name: 
        description: "Name of index, can contains letters, digits and underscores"
        type: string
        pattern: "^[A-Za-z0-9_\\-]*$"
        default: "id"
      json_paths:
        description: "Fields path in json object, e.g 'id' or 'subobject.field'. If index is 'composite' or 'is_array', than multiple json_paths can be specified, and index will get values from all specified fields."
        type: array
        items:
          type: string
          default: "id"
        minItems: 1
      field_type:
        type: string
        description: "Field data type"
        enum:
        - "int"
        - "int64"
        - "double"
        - "string"
        - "bool"
        - "composite"
        - "point"
      index_type:
        type: string
        description: "Index structure type"
        default: "hash"
        enum:
        - "hash"
        - "tree"
        - "text"
        - "rtree"
        - "ttl"
        - "-"
      expire_after:
        description: "Specify, time to live for ttl index, in seconds"
        type: integer
      is_pk:
        description: "Specifies, that index is primary key. The update opertations will checks, that PK field is unique. The namespace MUST have only 1 PK index"
        type: boolean
      is_array:
        description: "Specifies, that index is array. Array indexes can work with array fields, or work with multiple fields"
        type: boolean
        default: false
      is_dense:
        description: "Reduces the index size. For hash and tree it will save ~8 bytes per unique key value. Useful for indexes with high selectivity, but for tree and hash indexes with low selectivity can seriously decrease update performance;"
        type: boolean
        default: false
      is_sparse:
        description: "Value of index may not present in the document, and threfore, reduce data size but decreases speed operations on index"
        type: boolean
        default: false
      rtree_type:
        type: string
        description: "Algorithm to construct RTree index"
        enum:
        - "linear"
        - "quadratic"
        - "greene"
        - "rstar"
        default: "rstar"
      is_simple_tag:
        description: "Use simple tag instead of actual index, which will notice rx about possible field name for strict policies"
        type: boolean
        default: false
      collate_mode:
        type: string
        description: "String collate mode"
        default: "none"
        enum:
        - "none"
        - "ascii"
        - "utf8"
        - "numeric"
      sort_order_letters:
        type: string
        description: "Sort order letters"
        default: ""
      config:
        $ref: "#/definitions/FulltextConfig"

  JsonObjectDef:
    type: object
    properties:
      required:
        description: "Array of required fieldsl. Allowed for objects only"
        type: array
        items:
          type: string
      properties:
        type: object
        properties:
          field1:
            $ref: "#/definitions/JsonObjectDef"
          field2:
            $ref: "#/definitions/JsonObjectDef"
      items:
        $ref: "#/definitions/JsonObjectDef"
      additionalProperties:
        description: "Allow additional fields in this schema level. Allowed for objects only"
        type: boolean
        default: false
      type:
        description: "Entity type"
        type: string
        enum:
        - "object"
        - "string"
        - "number"
        - "array"

  SchemaDef:
    $ref: "#/definitions/JsonObjectDef"

  UpdateField:
    type: "object"
    required:
      - name
      - is_expression
      - is_object
      - values
    properties:
      name:
        type: "string"
        description: "field name"
      type:
        type: "string"
        description: "update entry type"
        enum:
          - "object"
          - "expression"
          - "value"
      is_array:
        type: "boolean"
        description: "is updated value an array"
      values:
        type: "array"
        items: 
          type: "object"
        description: "Values to update field with"

  Query:
    type: object
    required:
      - namespace
    properties:
      namespace:
        type: string
        description: "Namespace name"
      type:
        type: "string"
        description: "Type of query"
        enum:
          - "select"
          - "update"
          - "delete"
          - "truncate"
      limit:
        description: "Maximum count of returned items"
        type: integer
      offset:
        description: "Offset of first returned item"
        type: integer
      req_total:
        description: "Ask query to calculate total documents, match condition"
        type: string
        enum:
          - "disabled"
          - "enabled"
          - "cached"
        default: "disabled"
      filters:
        type: array
        description: "Filter for results documents"
        items: 
          $ref: "#/definitions/FilterDef"
      sort:
        description: "Specifies results sorting order"
        type: array
        items:
          $ref: "#/definitions/SortDef"
      merge_queries:
        description: "Merged queries to be merged with main query"
        type: array
        items:
          $ref: "#/definitions/Query"
      select_filter:
        description: "Filter fields of returned document. Can be dot separated, e.g 'subobject.field'"
        type: array
        items:
          type: string
          default: "id"
      select_functions:
        description: "Add extra select functions to query"
        type: array
        items:
          type: "string"
      drop_fields:
        description: "List of fields to be dropped"
        type: "array"
        items:
          type: "string"
      update_fields:
        description: "Fields to be updated"
        type: "array"
        items:
          $ref: "#/definitions/UpdateField"
      aggregations:
        description: "Ask query calculate aggregation"
        type: array
        items:
          $ref: "#/definitions/AggregationsDef"
      explain:
        description: "Add query execution explain information"
        type: boolean
        default: false
      select_with_rank:
        description: "Output fulltext rank in QueryResult. Allowed only with fulltext query"
        type: boolean
        default: false
      strict_mode:
        description: "Strict mode for query. Adds additional check for fields('names')/indexes('indexes') existence in sorting and filtering conditions"
        type: string
        enum:
          - "none"
          - "names"
          - "indexes"
        default: "names"

  EqualPositionDef:
    description: "Array fields to be searched with equal array indexes"
    type: "object"
    properties:
      positions:
        type: "array"
        items:
          type: "string"

  FilterDef:
    description: "If contains 'filters' then cannot contain 'cond', 'field' and 'value'. If not contains 'filters' then 'field' and 'cond' are required."
    type: object
    properties:
      field:
        description: "Field json path or index name for filter"
        type: string
      cond:
        type: string
        description: "Condition operator"
        enum:
        - "EQ" # Equality (between field and value or between 2 fields)
        - "GT" # Grower than (>)
        - "GE" # Grower or equal (>=)
        - "LE" # Less or equal (<=)
        - "LT" # Less than (>)
        - "SET" # field in (value1, value2, ...). Checks if value belongs to the set (or if 2 arrays has common values)
        - "ALLSET" # Checks all the values from the first array (field) belong to the second array (value)
        - "EMPTY" # Check if field is null
        - "RANGE" # Check if field is >= value1 and <= value2
        - "LIKE" # Filter strings by give patter
        - "DWITHIN" # Checks if point (from field) lies within given circle. Value must look like this: [[1, -3.5],5.0], where [1, -3.5] is the central point of the circle and 5.0 is the radius
      op:
        type: string
        description: "Logic operator"
        enum:
        - "AND"
        - "OR"
        - "NOT"
      value:
        description: "Value of filter. Single integer or string for EQ, GT, GE, LE, LT condition, array of 2 elements for RANGE condition, variable len array for SET and ALLSET conditions, or something like that: '[[1, -3.5],5.0]' for DWITHIN"
        type: object
      filters:
        type: array
        description: "Filter for results documents"
        items: 
          $ref: "#/definitions/FilterDef"
      join_query:
        $ref: "#/definitions/JoinedDef"
      first_field:
        description: "First field json path or index name for filter by two fields"
        type: string
      second_field:
        description: "Second field json path or index name for filter by two fields"
        type: string
      equal_positions:
        type: array
        description: "Array of array fields to be searched with equal array indexes"
        items:
          $ref: "#/definitions/EqualPositionDef"

  SortDef:
    description: "Specifies results sorting order"
    type: object
    required:
      - field
    properties:
      field:
        type: string
        description: "Field or index name for sorting"
      values:
        type: array
        description: "Optional: Documents with this values of field will be returned first"
        items:
          type: object
      desc:
        description: "Descent or ascent sorting direction"
        type: boolean

  JoinedDef:
    type: object
    required:
      - namespace
      - on
      - type
    properties:
      namespace:
        type: string
        description: "Namespace name"
      type:
        type: string
        description: "Join type"
        enum:
        - "LEFT"
        - "INNER"
        - "ORINNER"
      filters:
        type: array
        description: "Filter for results documents"
        items: 
          $ref: "#/definitions/FilterDef"
      sort:
        type: "array"
        items:
          $ref: "#/definitions/SortDef"
      limit:
        type: integer
        description: "Maximum count of returned items"
      offset:
        type: integer
        description: "Offset of first returned item"
      on:
        type: array
        description: "Join ON statement"
        items: 
          $ref: "#/definitions/OnDef"
      select_filter:
        description: "Filter fields of returned document. Can be dot separated, e.g 'subobject.field'"
        type: array
        items:
          type: string

  OnDef:
    type: object
    required:
      - left_field
      - right_field
      - cond
    properties:
      left_field:
        description: "Field from left namespace (main query namespace)"
        type: string
      right_field:
        description: "Field from right namespace (joined query namespace)"
        type: string
      cond:
        type: string
        description: "Condition operator"
        enum:
        - "EQ" # Equality
        - "GT" # Grower than (>)
        - "GE" # Grower or equal (>=)
        - "LE" # Less or equal (<=)
        - "LT" # Less than (>)
        - "SET" # X in (v1, v2, ...)
      op:
        type: string
        description: "Logic operator"
        enum:
        - "AND"
        - "OR"
        - "NOT"

  AggregationsDef:
    type: object
    required:
      - fields
      - type
    properties:
      fields:
        type: array
        description: "Fields or indexes names for aggregation function"
        items:
          type: string
      type:
        type: string
        description: "Aggregation function"
        enum:
        - "SUM"
        - "AVG"
        - "MIN"
        - "MAX"
        - "FACET"
        - "DISTINCT"
      sort:
        description: "Specifies results sorting order. Allowed only for FACET"
        type: array
        items:
          $ref: "#/definitions/AggregationsSortDef"
      limit:
        type: integer
        default: UINT_MAX
        minimum: 0
        description: "Number of rows to get from result set. Allowed only for FACET"
      offset:
        type: integer
        default: 0
        minimum: 0
        description: "Index of the first row to get from result set. Allowed only for FACET"

  AggregationsSortDef:
    description: "Specifies facet aggregations results sorting order"
    type: object
    required:
      - field
    properties:
      field:
        type: string
        description: "Field or index name for sorting"
      desc:
        description: "Descent or ascent sorting direction"
        type: boolean

  FulltextConfig:
    type: object
    description: "Fulltext Index configuration"
    properties:
      enable_translit:
        type: boolean
        default: true
        description: "Enable russian translit variants processing. e.g. term 'luntik' will match word 'лунтик'"
      enable_numbers_search:
        type: boolean
        default: false
        description: "Enable number variants processing. e.g. term '100' will match words one hundred"
      enable_warmup_on_ns_copy:
        type: boolean
        default: false
        description: "Enable auto index warmup after atomic namespace copy on transaction"
      enable_kb_layout:
        type: boolean
        default: true
        description: "Enable wrong keyboard layout variants processing. e.g. term 'keynbr' will match word 'лунтик'"
      log_level:
        type: integer
        default: 0
        minimum: 0
        maximum: 4
        description: "Log level of full text search engine"
      merge_limit:
        type: integer
        default: 20000
        minimum: 0
        maximum: 65535
        description: "Maximum documents count which will be processed in merge query results.  Increasing this value may refine ranking of queries with high frequency words, but will decrease search speed"
      extra_word_symbols:
        type: string
        default: "-/+"
        description: "List of symbols, which will be threated as word part, all other symbols will be thrated as wors separators"
      stop_words:
        type: array
        description: "List of stop words. Words from this list will be ignored in documents and queries"
        items:
          type: string
      stemmers:
        type: array
        default: ["en","ru"]
        description: "List of stemmers to use"
        items:
          type: string
      synonyms:
        type: array
        description: "List of synonyms for replacement"
        items:
          $ref: "#/definitions/FulltextSynonym"
      bm25_boost:
        type: number
        format: "float"
        default: 1.0
        minimum: 0.0
        maximum: 10.0
        description: "Boost of bm25 ranking"
      bm25_weight:
        type: number
        format: "float"
        default: 0.1
        minimum: 0.0
        maximum: 1.0
        description: "Weight of bm25 rank in final rank 0: bm25 will not change final rank. 1: bm25 will affect to finl rank in 0 - 100% range"
      distance_boost:
        type: number
        format: "float"
        default: 1.0
        minimum: 0.0
        maximum: 10.0
        description: "Boost of search query term distance in found document"
      distance_weight:
        type: number
        format: "float"
        default: 0.5
        minimum: 0.0
        maximum: 1.0
        description: "Weight of search query terms distance in found document in final rank 0: distance will not change final rank. 1: distance will affect to final rank in 0 - 100% range"
      term_len_boost:
        type: number
        format: "float"
        default: 1.0
        minimum: 0.0
        maximum: 10.0
        description: "Boost of search query term length"
      term_len_weight:
        type: number
        format: "float"
        default: 0.3
        minimum: 0.0
        maximum: 1.0
        description: "Weight of search query term length in final rank. 0: term length will not change final rank. 1: term length will affect to final rank in 0 - 100% range"
      position_boost:
        type: number
        format: "float"
        default: 1.0
        minimum: 0.0
        maximum: 10.0
        description: "Boost of search query term position"
      position_weight:
        type: number
        format: "float"
        default: 0.1
        minimum: 0.0
        maximum: 1.0
        description: "Weight of search query term position in final rank. 0: term position will not change final rank. 1: term position will affect to final rank in 0 - 100% range"
      full_match_boost:
        type: number
        format: "float"
        default: 1.1
        minimum: 0.0
        maximum: 10.0
        description: "Boost of full match of search phrase with doc"
      partial_match_decrease:
        type: integer
        default: 15
        minimum: 0
        maximum: 100
        description: "Decrease of relevancy in case of partial match by value: partial_match_decrease * (non matched symbols) / (matched symbols)"
      min_relevancy:
        type: number
        format: "float"
        default: 0.05
        minimum: 0.0
        maximum: 1.0
        description: "Minimum rank of found documents. 0: all found documents will be returned 1: only documents with relevancy >= 100% will be returned "
      max_typos:
        type: integer
        default: 2
        minimum: 0
        maximum: 4
        description: "Maximum possible typos in word. 0: typos is disabled, words with typos will not match. N: words with N possible typos will match. It is not recommended to set more than 2 possible typo -It will seriously increase RAM usage, and decrease search speed"
      max_typo_len:
        type: integer
        description: "Maximum word length for building and matching variants with typos."
        default: 15
        minimum: 0
        maximum: 100
      max_rebuild_steps:
        type: integer
        description: "Maximum steps without full rebuild of ft - more steps faster commit slower select - optimal about 15."
        default: 50
        minimum: 0
        maximum: 500
      max_step_size:
        type: integer
        description: "Maximum unique words to step"
        default: 4000
        minimum: 5
        maximum: 1000000000
      sum_ranks_by_fields_ratio:
        type: number
        format: "float"
        default: 0.0
        minimum: 0.0
        maximum: 1.0
        description: "Ratio to summation of ranks of match one term in several fields. For example, if value of this ratio is K, request is '@+f1,+f2,+f3 word', ranks of match in fields are R1, R2, R3 and R2 < R1 < R3, final rank will be R = R2 + K*R1 + K*K*R3"
      optimization:
        type: string
        description: "Optimize the index by memory or by cpu"
        enum:
        - "Memory"
        - "CPU"
        default: "Memory"
      enable_preselect_before_ft:
        type: boolean
        description: "Enable to execute others queries before the ft query"
        default: false
      max_areas_in_doc:
        type: number
        description: "Max number of highlighted areas for each field in each document (for snippet() and highlight()). '-1' means unlimited"
        default: 5
        maximum: 1000000000
      max_total_areas_to_cache:
        type: number
        description: "Max total number of highlighted areas in ft result, when result still remains cacheable. '-1' means unlimited"
        default: -1
        maximum: 1000000000
      fields:
        type: array
        description: "Configuration for certian field if it differ from whole index configuration"
        items:
          $ref: "#/definitions/FulltextFieldConfig"

  FulltextFieldConfig:
    type: object
    description: "Configuration for certian field if it differ from whole index configuration"
    properties:
      field_name:
        type: string
        description: "Field name"
      bm25_boost:
        type: number
        format: "float"
        default: 1.0
        minimum: 0.0
        maximum: 10.0
        description: "Boost of bm25 ranking"
      bm25_weight:
        type: number
        format: "float"
        default: 0.1
        minimum: 0.0
        maximum: 1.0
        description: "Weight of bm25 rank in final rank 0: bm25 will not change final rank. 1: bm25 will affect to finl rank in 0 - 100% range"
      term_len_boost:
        type: number
        format: "float"
        default: 1.0
        minimum: 0.0
        maximum: 10.0
        description: "Boost of search query term length"
      term_len_weight:
        type: number
        format: "float"
        default: 0.3
        minimum: 0.0
        maximum: 1.0
        description: "Weight of search query term length in final rank. 0: term length will not change final rank. 1: term length will affect to final rank in 0 - 100% range"
      position_boost:
        type: number
        format: "float"
        default: 1.0
        minimum: 0.0
        maximum: 10.0
        description: "Boost of search query term position"
      position_weight:
        type: number
        format: "float"
        default: 0.1
        minimum: 0.0
        maximum: 1.0
        description: "Weight of search query term position in final rank. 0: term position will not change final rank. 1: term position will affect to final rank in 0 - 100% range"

  FulltextSynonym:
    type: object
    description: "Fulltext synonym definition"
    properties:
      tokens:
        type: array
        description: "List source tokens in query, which will be replaced with alternatives"
        items:
          type: string
      alternatives:
        type: array
        description: "List of alternatives, which will be used for search documents"
        items:
          type: string
  MetaInfo:
    type: object
    required:
      - key
      - value
    description: "Meta info to be set"
    properties:
      key:
        type: string
      value:
        type: string

  MetaListResponse:
    type: object
    required:
      - meta
      - total_items
    description: "List of meta info of the specified namespace"
    properties:
      total_items:
        type: integer
        description: "Total count of meta info in the namespace"
      meta:
        type: array
        items:
          type: object
          required:
            - key
          properties:
            key:
              type: string
            value:
              description: "Optional: Provided if 'with_values' = true"
              type: string

  MetaByKeyResponse:
    type: object
    required:
      - key
      - value
    description: "Meta info of the specified namespace"
    properties:
      key:
        type: string
      value:
        type: string

  Items:
    type: object
    properties:
      total_items:
        description: "Total count of documents, matched specified filters"
        type: integer
      items:
        type: array
        description: "Documents, matched specified filters"
        items:
          type: object
  SuggestItems:
    type: object
    properties:
      suggests:
        type: array
        description: "Suggested query autocompletion variants"
        items:
          type: string
  QueryItems:
    type: object
    properties:
      items:
        type: array
        description: "Documents, matched query"
        items:
          type: object
      namespaces:
        type: array
        description: "Namespaces, used in query"
        items:
          type: string
      cache_enabled:
        description: "Enables to client cache returned items. If false, then returned items has been modified  by reindexer, e.g. by select filter, or by functions, and can't be cached"
        type: boolean
      query_total_items:
        description: "Total count of documents, matched query"
        type: integer
      aggregations:
        type: array
        description: "Aggregation functions results"
        items:
          $ref: "#/definitions/AggregationResDef"
      equal_position:
        type: array
        description: "Array fields to be searched with equal array indexes"
        items:
          type: string
      columns:
        type: array
        description: "Columns for table output"
        items:
          $ref: "#/definitions/QueryColumnDef"
      explain:
        $ref: "#/definitions/ExplainDef"


  Indexes:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Index"
      total_items:
        type: integer
        description: "Total count of indexes"

  ExplainDef:
    type: object
    description: "Query execution explainings"
    properties:
      total_us:
        type: integer
        description: "Total query execution time"
      loop_us:
        type: integer
        description: "Intersection loop time"
      indexes_us:
        type: integer
        description: "Indexes keys selection time"
      postprocess_us:
        type: integer
        description: "Query post process time"
      prepare_us:
        type: integer
        description: "Query prepare and optimize time"
      general_sort_us:
        type: integer
        description: "Result sort time"
      sort_index: 
        type: string
        description: "Index, which used for sort results"
      sort_by_uncommitted_index:
        type: boolean
        description: "Optimization of sort by uncompleted index has been performed"
      selectors:
        type: array
        description: "Filter selectos, used to proccess query conditions"
        items:
          type: object
          properties:
            method:
              type: string
              description: "Method, used to process condition"
              enum:
              - "scan"
              - "index"
              - "inner_join"
              - "left_join"
            field:
              type: string
              description: "Field or index name"
            items:
              type: integer
              description: "Count of scanned documents by this selector"
            matched:
              type: integer
              description: "Count of processed documents, matched this selector"
            comparators:
              type: integer
              description: "Count of comparators used, for this selector"
            cost:
              type: integer
              description: "Cost expectation of this selector"
            keys:
              type: integer
              description: "Number of uniq keys, processed by this selector (may be incorrect, in case of internal query optimization/caching"
            explain_preselect:
              description: "Preselect in joined namespace execution explainings"
              $ref: "#/definitions/ExplainDef"
            explain_select:
              description: "One of selects in joined namespace execution explainings"
              $ref: "#/definitions/ExplainDef"

  AggregationResDef:
    type: object
    required:
      - fields
      - type
    properties:
      fields:
        type: array
        description: "Fields or indexes names for aggregation function"
        items:
          type: string
      type:
        type: string
        description: "Aggregation function"
        enum:
        - "SUM"
        - "AVG"
        - "MIN"
        - "MAX"
        - "FACET"
        - "DISTINCT"
      value:
        type: number
        description: "Value, calculated by aggregator"
      facets:
        type: array
        description: "Facets, calculated by aggregator"
        items:
          type: object
          required:
            - values
            - count
          properties:
            values:
              type: array
              description: "Facet fields values"
              items:
                type: string
            count: 
              type: integer
              description: "Count of elemens these fields values"
      distincts:
        type: array
        description: "List of distinct values of the field"
        items:
          type: string

  QueryColumnDef:
    type: object
    description: "Query columns for table outputs"
    properties:
      name:
        type: string
        description: "Column name"
      width_percents:
        type: number
        description: "Column width in percents of total width"
      width_chars:
        type: number
        description: "Column width in chars"
      max_chars:
        type: number
        description: "Maximum count of chars in column"

  StatusResponse:
    type: object
    properties:
      success:
        type: boolean
        description: "Status of operation"
      response_code:
        type: integer
        enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
        description: >
          Error code:
           * 0 - errOK
           * 1 - errParseSQL
           * 2 - errQueryExec
           * 3 - errParams
           * 4 - errLogic
           * 5 - errParseJson
           * 6 - errParseDSL
           * 7 - errConflict
           * 8 - errParseBin
           * 9 - errForbidden
           * 10 - errWasRelock
           * 11 - errNotValid
           * 12 - errNetwork
           * 13 - errNotFound
           * 14 - errStateInvalidated
           * 15 - errBadTransaction
           * 16 - errOutdatedWAL
           * 17	- errNoWAL
           * 18 - errDataHashMismatch

      description:
        type: string
        description: "Text description of error details"

  ItemsUpdateResponse:
    type: object
    properties:
      updated:
        description: "Count of updated items"
        type: integer
      items:
        description: "Updated documents. Contains only if precepts were provided"
        type: array
        items:
          type: object

  UpdateResponse:
    type: object
    properties:
      updated:
        description: "Count of updated items"
        type: integer

  DatabaseMemStats:
    type: object
    properties:
      total_items:
        description: "Total count of documents, matched specified filters"
        type: integer
      items:
        type: array
        description: "Documents, matched specified filters"
        items:
          $ref: "#/definitions/NamespaceMemStats"

  NamespaceMemStats:
    type: object
    properties:
      name:
        type: string
        description: "Name of namespace" 
      items_count:
        type: integer
        description: "Total count of documents in namespace"
      strings_waiting_to_be_deleted_size:
        type: integer
        description: "Size of strings deleted from namespace, but still used in queryResults"
      updated_unix_nano:
        type: integer
        description: "[[deperecated]]. do not use"
      storage_ok:
        type: boolean
        description: "Status of disk storage (true, if storage is enabled and writable)"
      storage_enabled:
        type: boolean
        description: "Shows if storage is enabled (hovewer it may still be unavailable)"
      storage_status:
        type: string
        description: "More detailed info about storage status. May contain 'OK', 'DISABLED', 'NO SPACE LEFT' or last error descrition"
      storage_path:
        type: string
        description: "Filesystem path to namespace storage"
      optimization_completed:
        type: boolean
        description: "Background indexes optimization has been completed"
      total:
        type: object
        description: "Summary of total namespace memory consumption"
        properties:
          data_size:
            type: integer
            description: "Total memory size of stored documents, including system structures"
          indexes_size:
            type: integer
            description: "Total memory consumption of namespace's indexes"
          cache_size:
            type: integer
            description: "Total memory consumption of namespace's caches. e.g. idset and join caches"
          index_optimizer_memory:
            type: integer
            description: "Total memory size, occupated by index optimizer (in bytes)"
      join_cache:
        $ref: "#/definitions/JoinCacheMemStats"
      query_cache:
        $ref: "#/definitions/QueryCacheMemStats"
      replication:
        $ref: "#/definitions/ReplicationStats"
      indexes:
        type: array
        description: "Memory consumption of each namespace index"
        items:
          $ref: "#/definitions/IndexMemStat"

  IndexMemStat:
    type: object
    properties:
      name:
        type: string
        description: "Name of index. There are special index with name `-tuple`. It's stores original document's json structure with non indexe fields"
      unique_keys_count:
        type: integer
        description: "Count of unique keys values stored in index"
      idset_btree_size:
        type: integer
        description: "Total memory consumption of reverse index b-tree structures. For `dense` and `store` indexes always 0"
      idset_plain_size:
        type: integer
        description: "Total memory consumption of reverse index vectors. For `store` ndexes always 0"
      sort_orders_size:
        type: integer
        description: "Total memory consumption of SORT statement and `GT`, `LT` conditions optimized structures. Applicabe only to `tree` indexes"
      idset_cache:
        $ref: "#/definitions/IndexCacheMemStats"
      fulltext_size:
        type: integer
        description: "Total memory consumption of fulltext search structures"
      data_size:
        type: integer
        description: "Total memory consumption of documents's data, holded by index"
      tracked_updates_count:
        type: integer
        description: "Updates count, pending in index updates tracker"
      tracked_updates_buckets:
        type: integer
        description: "Buckets count in index updates tracker map"
      tracked_updates_size:
        type: integer
        description: "Updates tracker map size in bytes"

  JoinCacheMemStats:
    description: "Join cache stats. Stores results of selects to right table by ON condition"
    allOf: 
      - $ref: "#/definitions/CacheMemStats"

  QueryCacheMemStats:
    description: "Query cache stats. Stores results of SELECT COUNT(*) by Where conditions"
    allOf: 
      - $ref: "#/definitions/CacheMemStats"

  IndexCacheMemStats:
    description: "Idset cache stats. Stores merged reverse index results of SELECT field IN(...) by IN(...) keys"
    allOf: 
      - $ref: "#/definitions/CacheMemStats"

  CacheMemStats:
    type: object
    properties:
      total_size:
        type: integer
        description: "Total memory consumption by this cache"
      items_count:
        type: integer
        description: "Count of used elements stored in this cache"
      empty_count:
        type: integer
        description: "Count of empty elements slots in this cache"
      hit_count_limit:
        type: integer
        description: "Number of hits of queries, to store results in cache"

  ReplicationStats:
    description: "State of namespace replication"
    type: object
    properties:
      last_lsn:
        type: integer
        description: "Last Log Sequence Number (LSN) of applied namespace modification"
      cluster_id:
        type: integer
        description: "Cluster ID - must be same for client and for master"
      slave_mode:
        type: boolean
        description: "If true, then namespace is in slave mode"
      error_code:
        type: integer
        description: "Error code of last replication"
      error_message:
        type: string
        description: "Error message of last replication"
      status:
        type: string
        enum:
          - idle
          - error
          - fatal
          - syncing
          - none
        description: "Current replication status for this namespace"
      master_state:
        type: object
        description: "State of current master namespace"
        properties:
           data_hash:
             type: integer
             description: "Hashsum of all records in namespace"
           last_lsn:
             type: integer
             description: "Last Log Sequence Number (LSN) of applied namespace modification"
           updated_unix_nano:
             type: integer
             description: "Last update time"
           data_count:
             type: integer
             description: "Items count in master namespace"
      incarnation_counter:
        type: integer
        description: "Number of storage's master <-> slave switches"
      data_hash:
        type: integer
        description: "Hashsum of all records in namespace"
      wal_count:
        type: integer
        description: "Write Ahead Log (WAL) records count"
      wal_size:
        type: integer
        description: "Total memory consumption of Write Ahead Log (WAL)"
      updated_unix_nano:
        type: integer
        description: "Last update time"
      data_count:
        type: integer
        description: "Items count in namespace"

  DatabasePerfStats:
    type: object
    properties:
      total_items:
        description: "Total count of documents, matched specified filters"
        type: integer
      items:
        type: array
        description: "Documents, matched specified filters"
        items:
          $ref: "#/definitions/NamespacePerfStats"

  NamespacePerfStats:
    type: object
    properties:
      name:
        type: string
        description: "Name of namespace" 
      updates:
        $ref: "#/definitions/UpdatePerfStats"
      selects:
        $ref: "#/definitions/SelectPerfStats"
      transactions:
        $ref: "#/definitions/TransactionsPerfStats"
      indexes:
        type: array
        description: "Memory consumption of each namespace index"
        items:
          type: object
          properties:
            name:
              type: string
              description: "Name of index"
            updates:
              $ref: "#/definitions/UpdatePerfStats"
            selects:
              $ref: "#/definitions/SelectPerfStats"
  
  CommonPerfStats:
    type: object
    properties:
      total_queries_count:
        type: integer
        description: "Total count of queries to this object"
      total_avg_latency_us:
        type: integer
        description: "Average latency (execution time) for queries to this object"
      total_avg_lock_time_us:
        type: integer
        description: "Average waiting time for acquiring lock to this object"
      last_sec_qps:
        type: integer
        description: "Count of queries to this object, requested at last second"
      last_sec_avg_latency_us:
        type: integer
        description: "Average latency (execution time) for queries to this object at last second"
      last_sec_avg_lock_time_us:
        type: integer
        description: "Average waiting time for acquiring lock to this object at last second"
      latency_stddev:
        type: number
        description: "Standard deviation of latency values"
      min_latency_us:
        type: integer
        description: "Minimal latency value"
      max_latency_us:
        type: integer
        description: "Maximum latency value"

  UpdatePerfStats:
    description: "Performance statistics for update operations"
    allOf: 
      - $ref: "#/definitions/CommonPerfStats"

  SelectPerfStats:
    description: "Performance statistics for select operations"
    allOf: 
      - $ref: "#/definitions/CommonPerfStats"

  TransactionsPerfStats:
    description: "Performance statistics for transactions"
    type: object
    properties:
      total_count:
        type: integer
        description: "Total transactions count for this namespace"
      total_copy_count:
        type: integer
        description: "Total namespace copy operations"
      avg_steps_count:
        type: integer
        description: "Average steps count in transactions for this namespace"
      min_steps_count:
        type: integer
        description: "Minimum steps count in transactions for this namespace"
      max_steps_count:
        type: integer
        description: "Maximum steps count in transactions for this namespace"
      avg_prepare_time_us:
        type: integer
        description: "Average transaction preparation time usec"
      min_prepare_time_us:
        type: integer
        description: "Minimum transaction preparation time usec"
      max_prepare_time_us:
        type: integer
        description: "Maximum transaction preparation time usec"
      avg_commit_time_us:
        type: integer
        description: "Average transaction commit time usec"
      min_commit_time_us:
        type: integer
        description: "Minimum transaction commit time usec"
      max_commit_time_us:
        type: integer
        description: "Maximum transaction commit time usec"
      avg_copy_time_us:
        type: integer
        description: "Average namespace copy time usec"
      min_copy_time_us:
        type: integer
        description: "Maximum namespace copy time usec"
      max_copy_time_us:
        type: integer
        description: "Minimum namespace copy time usec"

  QueriesPerfStats:
    type: object
    properties:
      total_items:
        description: "Total count of documents, matched specified filters"
        type: integer
      items:
        type: array
        description: "Documents, matched specified filters"
        items:
          $ref: "#/definitions/QueryPerfStats"

  QueryPerfStats:
    description: "Performance statistics per each query"
    allOf: 
      - $ref: "#/definitions/CommonPerfStats"
      - type: object
        properties:
          query:
            type: string
            description: "normalized SQL representation of query"
          longest_query:
            type: string
            description: "not normalized SQL representation of longest query"

  SystemConfigItem:
    type: object
    required:
      - type
    properties:
      type: 
        type: string
        enum:
        - profiling
        - namespaces
        - replication
        - action
        default: "profiling"
      profiling:
        $ref: "#/definitions/ProfilingConfig"
      namespaces:
        type: array
        items:
          $ref: "#/definitions/NamespacesConfig"
      replication:
        $ref: "#/definitions/ReplicationConfig"
      action:
        $ref: "#/definitions/ActionCommand"
    discriminator: "type"

  ProfilingConfig:
    type: object
    properties:
      activitystats:
        type: boolean
        description: "Enables tracking activity statistics"
        default: false
      memstats:
        type: boolean
        description: "Enables tracking memory statistics"
        default: true
      perfstats:
        type: boolean
        description: "Enables tracking overal perofrmance statistics"
        default: false
      queriesperfstats:
        type: boolean
        description: "Enables record queries perofrmance statistics"
        default: false
      queries_threshold_us:
        type: integer
        description: "Minimum query execution time to be recoreded in #queriesperfstats namespace"
        default: 10
      long_queries_logging:
        $ref: "#/definitions/LongQueriesLogging"

  LongQueriesLogging:
        type: object
        description: "Parameters for logging long queries and transactions"
        properties:
          select:
            $ref: "#/definitions/SelectLogging"
          update_delete:
            $ref: "#/definitions/UpdateDeleteLogging"
          transaction:
            $ref: "#/definitions/TransactionLogging"

  SelectLogging:
    type: object
    properties:
      threshold_us:
        type: integer
        description: "Threshold value for logging SELECT queries, if -1 logging is disabled"
        default: -1
      normalized:
        description: "Output the query in a normalized form"
        type: boolean
        default: false

  UpdateDeleteLogging:
            type: object
            properties:
              threshold_us:
                type: integer
                description: "Threshold value for logging UPDATE and DELETE queries, if -1 logging is disabled"
                default: -1
              normalized:
                type: boolean
                description: "Output the query in a normalized form"
                default: false

  TransactionLogging:
    type: object
    properties:
      threshold_us:
        type: integer
        description: "Threshold value for total transaction commit time, if -1 logging is disabled"
        default: -1
      avg_step_threshold_us:
        type: integer
        description: "Threshold value for the average step duration time in a transaction, if -1 logging is disabled"
        default: -1

  NamespacesConfig:
    type: object
    properties:  
      namespace:
        type: string
        description: "Name of namespace, or `*` for setting to all namespaces"
      log_level:
        type: string
        description: "Log level of queries core logger"
        enum:
          - none
          - error
          - warning
          - info
          - trace
      join_cache_mode:
        type: string
        description: "Join cache mode"
        enum:
          - on
          - off
          - aggressive
      lazyload:
        type: boolean
        description: "Enable namespace lazy load (namespace shoud be loaded from disk on first call, not at reindexer startup)" 
      unload_idle_threshold:
        type: integer
        description: "Unload namespace data from RAM after this idle timeout in seconds. If 0, then data should not be unloaded"
      start_copy_policy_tx_size:
        type: integer
        description: "Enable namespace copying for transaction with steps count greater than this value (if copy_politics_multiplier also allows this)"
      copy_policy_multiplier:
        type: integer
        description: "Disables copy policy if namespace size is greater than copy_policy_multiplier * start_copy_policy_tx_size"
      tx_size_to_always_copy:
        type: integer
        description: "Force namespace copying for transaction with steps count greater than this value"
      optimization_timeout_ms:
        type: integer
        description: "Timeout before background indexes optimization start after last update. 0 - disable optimizations"
      optimization_sort_workers:
        type: integer
        description: "Maximum number of background threads of sort indexes optimization. 0 - disable sort optimizations"
      wal_size:
        type: integer
        description: "Maximum WAL size for this namespace (maximum count of WAL records)"
      max_preselect_size:
        type: integer
        default: 1000
        minimum: 0
        description: "Maximum preselect size for optimization of inner join by injection of filters. If max_preselect_size is 0, then only max_preselect_part will be used. If max_preselect_size is 0 and max_preselect_part is 0, optimization with preselect will not be applied. If max_preselect_size is 0 and max_preselect_part is 1.0, then the optimization will always be applied"
      max_preselect_part:
        type: number
        format: "float"
        default: 0.1
        minimum: 0.0
        maximum: 1.0
        description: "Maximum preselect part of namespace's items for optimization of inner join by injection of filters. If max_preselect_part is 0, then only mmax_preselect_size will be used. If max_preselect_size is 0 and max_preselect_part is 0, optimization with preselect will not be applied. If max_preselect_size is 0 and max_preselect_part is 1.0, then the optimization will always be applied"
      min_preselect_size:
        type: integer
        default: 1000
        minimum: 0
        description: "Minimum preselect size for optimization of inner join by injection of filters. Min_preselect_size will be used as preselect limit if (max_preselect_part * ns.size) is less than this value"
      index_updates_counting_mode:
        type: boolean
        description: "Enables 'simple counting mode' for index updates tracker. This will increase index optimization time, however may reduce insertion time"
      sync_storage_flush_limit:
        type: integer
        default: 0
        minimun: 0
        description: "Enables synchronous storage flush inside write-calls, if async updates count is more than sync_storage_flush_limit. 0 - disables synchronous storage flush, in this case storage will be flushed in background thread only"

  ReplicationConfig:
    type: object
    properties:  
      role:
        type: string
        description: "Replication role"
        enum:
          - none
          - slave
          - master
      master_dsn:
        type: string
        description: "DSN to master. Only cproto schema is supported"
      app_name:
        type: string
        description: "Application name, used by replicator as a login tag"
      timeout_sec:
        type: integer
        description: "Network timeout for communication with master, in seconds"
      enable_compression:
        type: boolean
        description: "Enable network traffic compression"
      cluster_id:
        type: integer
        description: "Cluser ID - must be same for client and for master"
      force_sync_on_logic_error:
        type: boolean
        description: "force resync on logic error conditions"
      force_sync_on_wrong_data_hash:
        type: boolean
        description: "force resync on wrong data hash conditions"
      namespaces:
        type: array
        description: "List of namespaces for replication. If emply, all namespaces. All replicated namespaces will become read only for slave"
        items:
          type: string

  ActionCommand:
    type: object
    properties:  
      command:
        type: string
        description: "Command to execute"
        enum:
          - restart_replication

  BeginTransactionResponse:
    type: "object"
    properties:
      tx_id:
        type: "string"
        description: "Unique transaction id"

